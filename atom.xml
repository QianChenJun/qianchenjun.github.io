<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stars</title>
  
  <subtitle>Under the starry sky.</subtitle>
  <link href="https://qianchenjun.github.io/atom.xml" rel="self"/>
  
  <link href="https://qianchenjun.github.io/"/>
  <updated>2023-08-16T03:36:50.093Z</updated>
  <id>https://qianchenjun.github.io/</id>
  
  <author>
    <name>小小千辰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>参考</title>
    <link href="https://qianchenjun.github.io/posts/6b6eb9a8/"/>
    <id>https://qianchenjun.github.io/posts/6b6eb9a8/</id>
    <published>2023-08-16T03:36:50.093Z</published>
    <updated>2023-08-16T03:36:50.093Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ggkt-1310548525.cos.ap-beijing.myqcloud.com/2022/07/01/a0d24900dca540e58c69873233a53d2a%E5%91%9C%E5%91%9C%E6%BC%86%E6%BC%86.jpg" alt="image-20220621181629570" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ggkt-1310548525.cos.ap-beijing.myqcloud.com/2022/07/01/a0d24900dca540e58c69873233a53d2a%E5%91%9C%E5%91%9C%E6%BC%86%E6%B</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Github Fork同步</title>
    <link href="https://qianchenjun.github.io/posts/d14bdd4f/"/>
    <id>https://qianchenjun.github.io/posts/d14bdd4f/</id>
    <published>2023-04-13T02:37:57.000Z</published>
    <updated>2023-04-13T02:37:57.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>查看远程仓库路径<br><br><code>git remote -v</code></p></li><li><p>设置上游服务器<br><br><code>git remote add upstream xxx.git</code></p></li><li><p>拉取上游服务器的代码，并且强制提交（适用于只是使用别人的项目而不提交自己代码的项目）<br><br><code>git fetch upstream &amp;&amp; git reset --hard upstream/main &amp;&amp; git push -f</code></p></li></ol><p><em><span id="more"></span></em></p>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看远程仓库路径&lt;br&gt;&lt;br&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置上游服务器&lt;br&gt;&lt;br&gt;&lt;code&gt;git remote add upstream xxx.git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拉取上游服务器的代码，并且强制提交（适用于只是使用别人的项目而不提交自己代码的项目）&lt;br&gt;&lt;br&gt;&lt;code&gt;git fetch upstream &amp;amp;&amp;amp; git reset --hard upstream/main &amp;amp;&amp;amp; git push -f&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Git" scheme="https://qianchenjun.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>手写一个简单的IOC</title>
    <link href="https://qianchenjun.github.io/posts/1b8a0000/"/>
    <id>https://qianchenjun.github.io/posts/1b8a0000/</id>
    <published>2023-04-12T07:51:21.000Z</published>
    <updated>2023-04-12T07:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><span id="more"></span></em></p><h2 id="自定义两个注解"><a href="#自定义两个注解" class="headerlink" title="自定义两个注解"></a>自定义两个注解</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><blockquote><p>类似于Spring中的@Component</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Bean</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Di"><a href="#Di" class="headerlink" title="@Di"></a>@Di</h3><blockquote><p>类似于Spring中的@Autowired</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Di</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dao层代码执行结束..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Di</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        userDao<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Service层代码执行完毕..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="核心包"><a href="#核心包" class="headerlink" title="核心包"></a>核心包</h2><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="AnnotationApplicationContext"><a href="#AnnotationApplicationContext" class="headerlink" title="AnnotationApplicationContext"></a>AnnotationApplicationContext</h3><pre class="language-Java" data-language="Java"><code class="language-Java">import tk.qianchen.ioc.inno.Bean;import tk.qianchen.ioc.inno.Di;import java.io.File;import java.io.IOException;import java.lang.reflect.Field;import java.net.URL;import java.net.URLDecoder;import java.util.Enumeration;import java.util.HashMap;import java.util.Map;&#x2F;** * @Date: 2023&#x2F;4&#x2F;11 * @Author: Thousand_Star * @Description: *&#x2F;public class AnnotationApplicationContext implements ApplicationContext &#123;    &#x2F;&#x2F; 存储Bean的容器    private Map&lt;Class, Object&gt; beanFactory &#x3D; new HashMap&lt;&gt;();    &#x2F;&#x2F; 文件根路径    private static String rootPath;    &#x2F;**     * 根据class获取容器中的Bean     * @param clazz     * @return     *&#x2F;    @Override    public Object getBean(Class clazz) &#123;        return beanFactory.get(clazz);    &#125;    &#x2F;**     * 根据包路径扫描加载Bean     * 扫描当前包及其子包，将所有标有@Bean的类都通过反射进行实例化     * @param basePackage tk.qianchen     *&#x2F;    public AnnotationApplicationContext(String basePackage) &#123;        try &#123;            &#x2F;&#x2F; 将传递的路径中的.变成\  --&gt; tk.qianchen -&gt; tk\qianchen            String packagePath &#x3D; basePackage.replaceAll(&quot;\\.&quot;, &quot;\\\\&quot;);            &#x2F;&#x2F; 根据当前线程获取全路径集合            Enumeration&lt;URL&gt; urls &#x3D; Thread.currentThread().getContextClassLoader().getResources(packagePath);            while (urls.hasMoreElements()) &#123;                &#x2F;&#x2F; 获取全路径（全路径 &#x3D; 根路径 + 包路径）                URL url &#x3D; urls.nextElement();                &#x2F;&#x2F; 将字符转义                String filePath &#x3D; URLDecoder.decode(url.getFile(), &quot;utf-8&quot;);                &#x2F;&#x2F; 保存根路径（除去包路径剩下的部分）                rootPath &#x3D; filePath.substring(0, filePath.length() - packagePath.length());                &#x2F;&#x2F; 加载bean                loadBean(new File(filePath));            &#125;        &#125; catch (IOException e) &#123;            throw new RuntimeException(e);        &#125;        &#x2F;&#x2F; 依赖注入        loadDi();    &#125;    private void loadDi() &#123;        &#x2F;&#x2F; 1. 遍历容器集合        for (Map.Entry&lt;Class, Object&gt; entry : beanFactory.entrySet()) &#123;            &#x2F;&#x2F; 2. 取出每一个value            Object obj &#x3D; entry.getValue();            Class&lt;?&gt; clazz &#x3D; obj.getClass();            &#x2F;&#x2F; 3. 获取成员变量列表            Field[] declaredFields &#x3D; clazz.getDeclaredFields();            &#x2F;&#x2F; 4. 遍历成员变量列表            for (Field field : declaredFields) &#123;                Di annotation &#x3D; field.getAnnotation(Di.class);                if (annotation !&#x3D; null) &#123;                    field.setAccessible(true);                    &#x2F;&#x2F; 5. 给该变量赋值                    try &#123;                        field.set(obj, beanFactory.get(field.getType()));                    &#125; catch (IllegalAccessException e) &#123;                        throw new RuntimeException(e);                    &#125;                &#125;            &#125;        &#125;    &#125;    &#x2F;**     * 将Bean保存到容器中     * @param file     *&#x2F;    private void loadBean(File file) &#123;        &#x2F;&#x2F; 1.判断file对象是否是文件夹        if (file.isDirectory()) &#123;            &#x2F;&#x2F; 2.如果是文件夹，获取子文件列表            File[] childrenFiles &#x3D; file.listFiles();            &#x2F;&#x2F; 3.判断子文件列表是否为空            if (childrenFiles &#x3D;&#x3D; null || childrenFiles.length &#x3D;&#x3D; 0) &#123;                &#x2F;&#x2F; 4.如果为空，则返回                return;            &#125;            &#x2F;&#x2F; 5.如果不为空，遍历文件夹            for (File childrenFile : childrenFiles) &#123;                &#x2F;&#x2F; 5.1 遍历得到每个File文件，如果是文件夹，递归                if (childrenFile.isDirectory()) &#123;                    loadBean(childrenFile);                &#125;                &#x2F;&#x2F; 5.2 如果是文件，得到包路径+类名称部分 -- 截取根路径                String pathWithClass &#x3D; childrenFile.getAbsolutePath().substring(rootPath.length() - 1);                &#x2F;&#x2F; 5.3 判断当前文件是否是.class类型                if (pathWithClass.contains(&quot;.class&quot;)) &#123;                    &#x2F;&#x2F; 5.4 如果是.class类型，则将路径中的\替换成. 并且将.class去掉                    String fullName &#x3D; pathWithClass                            .replaceAll(&quot;\\\\&quot;, &quot;.&quot;)                            .replace(&quot;.class&quot;, &quot;&quot;);                    &#x2F;&#x2F; 5.5 判断类上面是否有@Bean注解，如果有则实例化                    try &#123;                        Class&lt;?&gt; clazz &#x3D; Class.forName(fullName);                        &#x2F;&#x2F; 5.6 如果当前类不是接口                        if (!clazz.isInterface()) &#123;                            Bean bean &#x3D; clazz.getAnnotation(Bean.class);                            if (bean !&#x3D; null) &#123;                                Object instance &#x3D; clazz.newInstance();                                &#x2F;&#x2F; 5.6 将对象实例化后放到map集合中                                &#x2F;&#x2F; 判断一下当前实例有没有接口，有则作为key                                if (clazz.getInterfaces().length &gt; 0) &#123;                                    beanFactory.put(clazz.getInterfaces()[0], instance);                                &#125; else &#123;                                    beanFactory.put(clazz, instance);                                &#125;                            &#125;                        &#125;                    &#125; catch (Exception e) &#123;                        throw new RuntimeException(e);                    &#125;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUser</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationApplicationContext</span><span class="token punctuation">(</span><span class="token string">"tk.qianchen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> bean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202304122010105.png" alt="image-20230412201010885" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="Java" scheme="https://qianchenjun.github.io/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://qianchenjun.github.io/tags/Spring/"/>
    
    <category term="IOC" scheme="https://qianchenjun.github.io/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁+AOP实现缓存</title>
    <link href="https://qianchenjun.github.io/posts/32677e9a/"/>
    <id>https://qianchenjun.github.io/posts/32677e9a/</id>
    <published>2023-04-06T01:45:31.000Z</published>
    <updated>2023-04-06T01:45:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于将数据加入缓存的代码存在通用性，所以我们通过定义一个AOP（注解方式）来简化这部分代码的开发。</p><p>其使用原理类似于<code>@TransactionManager</code>开启事务</p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202304051558287.png" alt="image-20230405155806192" loading="lazy"></p></blockquote><p><em><span id="more"></span></em></p><h3 id="定义注解-GmallCache"><a href="#定义注解-GmallCache" class="headerlink" title="定义注解@GmallCache"></a>定义注解@GmallCache</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">GmallCache</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"cache:"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">":info"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="定义切面"><a href="#定义切面" class="headerlink" title="定义切面"></a>定义切面</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gmall<span class="token punctuation">.</span>common<span class="token punctuation">.</span>constant<span class="token punctuation">.</span></span><span class="token class-name">RedisConst</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">MethodSignature</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RLock</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RedissonClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GmallCacheAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span>    <span class="token comment">// 定义一个环绕通知</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.atguigu.gmall.common.cache.GmallCache)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">gmallCacheAspectMethod</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">/*         业务逻辑！         1. 必须先知道这个注解在哪些方法 || 必须要获取到方法上的注解         2. 获取到注解上的前缀         3. 必须要组成一个缓存的key！         4. 可以通过这个key 获取缓存的数据            true:                直接返回！            false:                分布式锁业务逻辑！         */</span>        <span class="token comment">// 拼接存入Redis的key</span>        <span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取注解对象</span>        <span class="token class-name">GmallCache</span> gmallCache <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">GmallCache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取前缀</span>        <span class="token class-name">String</span> prefix <span class="token operator">=</span> gmallCache<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取后缀</span>        <span class="token class-name">String</span> suffix <span class="token operator">=</span> gmallCache<span class="token punctuation">.</span><span class="token function">suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取方法传递的参数</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 拼接key</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> prefix <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">+</span> suffix<span class="token punctuation">;</span>        <span class="token comment">// 查询缓存中的数据</span>        obj <span class="token operator">=</span> <span class="token function">getRedisData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 缓存中没有对应数据，调用数据库查询数据，并且将数据放到缓存中</span>                <span class="token comment">// 分布式锁操作数据库（防止缓存穿透）</span>                <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 调用tryLock</span>                <span class="token keyword">boolean</span> res <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">RedisConst</span><span class="token punctuation">.</span>SKULOCK_EXPIRE_PX1<span class="token punctuation">,</span> <span class="token class-name">RedisConst</span><span class="token punctuation">.</span>SKULOCK_EXPIRE_PX2<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 如果获取锁成功，执行业务逻辑（查询数据库）</span>                    obj <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">// 如果数据库不存在对应数据</span>                            <span class="token comment">// 这个地方需要注意返回对应类型的数据，否则会出现ClassCastException</span>                            <span class="token comment">// 获取返回值类的字节码对象</span>                            <span class="token class-name">Class</span> aClass <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            obj <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 将对象放入缓存</span>                            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RedisConst</span><span class="token punctuation">.</span>SKUKEY_TEMPORARY_TIMEOUT<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">// 如果数据库存在对应数据</span>                            <span class="token comment">// 将对象放入缓存</span>                            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RedisConst</span><span class="token punctuation">.</span>SKUKEY_TIMEOUT<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 返回对应数据</span>                        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 释放锁</span>                        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 如果获取锁失败</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">gmallCacheAspectMethod</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 缓存中存在对应数据，直接返回缓存中的数据</span>                <span class="token keyword">return</span> obj<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果执行到了此行，说明程序出现了异常，调用对应的数据库操作方法兜底即可</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查询缓存中的数据     * @param key     * @param signature     * @return     */</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getRedisData</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">MethodSignature</span> signature<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 数据存入Redis的时候是Json字符串</span>        <span class="token class-name">String</span> strJson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>strJson<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 将Json字符串转成对应的数据类型</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>strJson<span class="token punctuation">,</span> signature<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 数据为空返回null</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>上述代码主要实现了缓存的逻辑，以及调用原方法查询数据库时可能出现<strong>缓存穿透</strong>等问题做了优化。</p><p><strong>将该注解放到某一个查询数据库的方法之上即可完成添加缓存的操作。</strong></p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202304051608304.png" alt="image-20230405160825253" loading="lazy"></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;由于将数据加入缓存的代码存在通用性，所以我们通过定义一个AOP（注解方式）来简化这部分代码的开发。&lt;/p&gt;
&lt;p&gt;其使用原理类似于&lt;code&gt;@TransactionManager&lt;/code&gt;开启事务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202304051558287.png&quot; alt=&quot;image-20230405155806192&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="Java" scheme="https://qianchenjun.github.io/categories/Java/"/>
    
    
    <category term="AOP" scheme="https://qianchenjun.github.io/tags/AOP/"/>
    
    <category term="分布式锁" scheme="https://qianchenjun.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>JWT简单使用</title>
    <link href="https://qianchenjun.github.io/posts/cca02f36/"/>
    <id>https://qianchenjun.github.io/posts/cca02f36/</id>
    <published>2023-03-21T01:39:55.000Z</published>
    <updated>2023-03-21T01:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>JWT全称：<code>JSON Web Token</code>  （官网：<a href="https://jwt.io/%EF%BC%89">https://jwt.io/）</a></p><ul><li><p>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</p><blockquote><p><strong>简洁</strong>：是指jwt就是一个简单的字符串。可以在请求参数或者是请求头当中直接传递。</p><p><strong>自包含</strong>：指的是jwt令牌，看似是一个随机的字符串，但是我们是可以根据自身的需求在jwt令牌中存储自定义的数据内容。如：可以直接在jwt令牌中存储用户的相关信息。</p><p>简单来讲，jwt就是将原始的json数据格式进行了安全的封装，这样就可以直接基于jwt在通信双方安全的进行信息传输了。</p></blockquote></li></ul><p><em><span id="more"></span></em></p><p>JWT的组成： （JWT令牌由三个部分组成，三个部分之间使用英文的点来分割）</p><ul><li><p>第一部分：Header(头）， 记录令牌类型、签名算法等。 例如：<code>&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;type&quot;:&quot;JWT&quot;&#125;</code></p></li><li><p>第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如：<code>&#123;&quot;id&quot;:&quot;1&quot;,&quot;username&quot;:&quot;Tom&quot;&#125;</code></p></li><li><p>第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加入指定秘钥，通过指定签名算法计算而来。</p><blockquote><p>签名的目的就是为了防jwt令牌被篡改，而正是因为jwt令牌最后一个部分数字签名的存在，所以整个jwt 令牌是非常安全可靠的。一旦jwt令牌当中任何一个部分、任何一个字符被篡改了，整个令牌在校验的时候都会失败，所以它是非常安全可靠的。</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202303211719557.png" alt="image-20230106085442076" loading="lazy"></p><blockquote><p>JWT是如何将原始的JSON格式数据，转变为字符串的呢？</p><p>其实在生成JWT令牌时，会对JSON格式的数据进行一次编码：进行base64编码</p><p>Base64：是一种基于64个可打印的字符来表示二进制数据的编码方式。既然能编码，那也就意味着也能解码。所使用的64个字符分别是A到Z、a到z、 0- 9，一个加号，一个斜杠，加起来就是64个字符。任何数据经过base64编码之后，最终就会通过这64个字符来表示。当然还有一个符号，那就是等号。等号它是一个补位的符号</p><p><strong>需要注意的是Base64是编码方式，而不是加密方式。</strong></p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202303211719558.png" alt="image-20230112114319773" loading="lazy"> </p><p>JWT令牌最典型的应用场景就是登录认证：</p><ol><li>在浏览器发起请求来执行登录操作，此时会访问登录的接口，如果登录成功之后，我们需要生成一个jwt令牌，将生成的 jwt令牌返回给前端。</li><li>前端拿到jwt令牌之后，会将jwt令牌存储起来。在后续的每一次请求中都会将jwt令牌携带到服务端。</li><li>服务端统一拦截请求之后，先来判断一下这次请求有没有把令牌带过来，如果没有带过来，直接拒绝访问，如果带过来了，还要校验一下令牌是否是有效。如果有效，就直接放行进行请求的处理。</li></ol><p>在JWT登录认证的场景中我们发现，整个流程当中涉及到两步操作：</p><ol><li>在登录成功之后，要生成令牌。</li><li>每一次请求当中，要接收令牌并对令牌进行校验。</li></ol><br><h2 id="生成和校验"><a href="#生成和校验" class="headerlink" title="生成和校验"></a>生成和校验</h2><p>JWT依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- JWT依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>JWT工具类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token comment">// 设置密钥</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> APP_SECRET <span class="token operator">=</span> <span class="token string">"ukc8BDbRigUDaY6pZFfWus2jZWLPHO"</span><span class="token punctuation">;</span><span class="token comment">// 通过Id和昵称来获取JWT密钥</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getJwtToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> nickname<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> <span class="token class-name">JwtToken</span> <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeaderParam</span><span class="token punctuation">(</span><span class="token string">"typ"</span><span class="token punctuation">,</span> <span class="token string">"JWT"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeaderParam</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">,</span> <span class="token string">"HS256"</span><span class="token punctuation">)</span><span class="token comment">// 修改工程名称</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"guli-user"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 自定义内容 -- 载荷</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">,</span> nickname<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> APP_SECRET<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">JwtToken</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断token是否存在与有效     * @param jwtToken     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> jwtToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>APP_SECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断token是否存在与有效     * @param request     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkToken</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> jwtToken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>APP_SECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据token获取会员id     * @param request     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getMemberIdByJwtToken</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> jwtToken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> claimsJws <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>APP_SECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JWT令牌&quot;&gt;&lt;a href=&quot;#JWT令牌&quot; class=&quot;headerlink&quot; title=&quot;JWT令牌&quot;&gt;&lt;/a&gt;JWT令牌&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;JWT全称：&lt;code&gt;JSON Web Token&lt;/code&gt;  （官网：&lt;a href=&quot;https://jwt.io/%EF%BC%89&quot;&gt;https://jwt.io/）&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;简洁&lt;/strong&gt;：是指jwt就是一个简单的字符串。可以在请求参数或者是请求头当中直接传递。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自包含&lt;/strong&gt;：指的是jwt令牌，看似是一个随机的字符串，但是我们是可以根据自身的需求在jwt令牌中存储自定义的数据内容。如：可以直接在jwt令牌中存储用户的相关信息。&lt;/p&gt;
&lt;p&gt;简单来讲，jwt就是将原始的json数据格式进行了安全的封装，这样就可以直接基于jwt在通信双方安全的进行信息传输了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="Java" scheme="https://qianchenjun.github.io/categories/Java/"/>
    
    
    <category term="JWT" scheme="https://qianchenjun.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>青龙面板搭建</title>
    <link href="https://qianchenjun.github.io/posts/329c3308/"/>
    <id>https://qianchenjun.github.io/posts/329c3308/</id>
    <published>2023-03-17T02:10:45.000Z</published>
    <updated>2023-03-17T02:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="青龙面板搭建"><a href="#青龙面板搭建" class="headerlink" title="青龙面板搭建"></a>青龙面板搭建</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">docker安装教程参考菜鸟教程</a></p><h2 id="青龙面板"><a href="#青龙面板" class="headerlink" title="青龙面板"></a>青龙面板</h2><h3 id="安装docker镜像"><a href="#安装docker镜像" class="headerlink" title="安装docker镜像"></a>安装docker镜像</h3><pre class="language-docker" data-language="docker"><code class="language-docker">docker pull whyour/qinglong:latest </code></pre><h3 id="启动docker镜像"><a href="#启动docker镜像" class="headerlink" title="启动docker镜像"></a>启动docker镜像</h3><pre class="language-none"><code class="language-none">docker run -dit \   -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \   -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \   -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \   -v $PWD&#x2F;ql&#x2F;scripts:&#x2F;ql&#x2F;scripts \   -p 5700:5700 \   --name qinglong \   --hostname qinglong \   --restart always \   whyour&#x2F;qinglong:latest</code></pre><h3 id="配置青龙基本信息"><a href="#配置青龙基本信息" class="headerlink" title="配置青龙基本信息"></a>配置青龙基本信息</h3><p>这个时候青龙面板已经启动完毕，地址为<code>IP+端口</code>，需要配置一些基本信息。</p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/image-20230317013318782.png" alt="image-20230317013318782" loading="lazy"></p><h4 id="安装依赖-自动安装"><a href="#安装依赖-自动安装" class="headerlink" title="安装依赖-自动安装"></a>安装依赖-自动安装</h4><p>首先进入青龙的容器：<code>docker exec -it ql bash </code></p><p>粘贴如下代码即可</p><pre class="language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;bean661&#x2F;utils&#x2F;main&#x2F;QLOneKeyDependency.sh | shcurl -fsSL https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;bean661&#x2F;utils&#x2F;main&#x2F;QLOneKeyDependency_easy.sh | sh</code></pre><h4 id="手动安装依赖"><a href="#手动安装依赖" class="headerlink" title="手动安装依赖"></a>手动安装依赖</h4><blockquote><p>在青龙面板配置</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/image-20230317013613738.png" alt="image-20230317013613738" loading="lazy"></p><pre class="language-none"><code class="language-none">1. Nodejs（不要复制这个）crypto-jsprettytabledotenvjsdomdate-fnstough-cookietslibws@7.4.3ts-md5jsdom -gjiebafsform-datajson5global-agentpng-js@types&#x2F;noderequiretypescriptjs-base64axios2. Python3（不要复制这个）requestscanvasping3jiebaaiohttpPyExecJS3. Linux（不要复制这个）bizCodelxmlbizMsg</code></pre><h4 id="创建应用配置"><a href="#创建应用配置" class="headerlink" title="创建应用配置"></a>创建应用配置</h4><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/image-20230317015659824.png" alt="image-20230317015659824" loading="lazy"></p><h3 id="拉取常见脚本库"><a href="#拉取常见脚本库" class="headerlink" title="拉取常见脚本库"></a>拉取常见脚本库</h3><h4 id="Faker3-不含助力"><a href="#Faker3-不含助力" class="headerlink" title="Faker3(不含助力)"></a>Faker3(不含助力)</h4><pre class="language-none"><code class="language-none">ql repo https:&#x2F;&#x2F;github.com&#x2F;shufflewzc&#x2F;faker3.git &quot;jd_|jx_|gua_|jddj_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator&quot; &quot;main&quot;</code></pre><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/image-20230317013852521.png" alt="image-20230317013852521" loading="lazy"></p><h3 id="配置sallyGirl"><a href="#配置sallyGirl" class="headerlink" title="配置sallyGirl"></a>配置sallyGirl</h3><ol><li><p>国内用户</p><pre class="language-none"><code class="language-none">s&#x3D;sillyGirl;a&#x3D;arm64;if [[ $(uname -a | grep &quot;x86_64&quot;) !&#x3D; &quot;&quot; ]];then a&#x3D;amd64;fi ;if [ ! -d $s ];then mkdir $s;fi ;cd $s;wget http:&#x2F;&#x2F;github.yanyuge.workers.dev&#x2F;https:&#x2F;&#x2F;github.com&#x2F;cdle&#x2F;$&#123;s&#125;&#x2F;releases&#x2F;download&#x2F;main&#x2F;$&#123;s&#125;_linux_$a -O $s &amp;&amp; chmod 777 $s;pkill -9 $s;$(pwd)&#x2F;$s</code></pre></li><li><p>国外用户</p><pre class="language-none"><code class="language-none">s&#x3D;sillyGirl;a&#x3D;arm64;if [[ $(uname -a | grep &quot;x86_64&quot;) !&#x3D; &quot;&quot; ]];then a&#x3D;amd64;fi ;if [ ! -d $s ];then mkdir $s;fi ;cd $s;wget https:&#x2F;&#x2F;github.com&#x2F;cdle&#x2F;$&#123;s&#125;&#x2F;releases&#x2F;download&#x2F;main&#x2F;$&#123;s&#125;_linux_$a -O $s &amp;&amp; chmod 777 $s;pkill -9 $s;$(pwd)&#x2F;$s</code></pre></li></ol><p>安装完成后按照如下操作即可（交互式操作）</p><pre class="language-none"><code class="language-none">cd &#x2F;etc&#x2F;sillyGirl.&#x2F;sillyGirl -t# 设置端口set sillyGirl port 9090# 设置主人账号set qq masters 你的管理QQ号# 开启http服务set sillyGirl enable_http_server true...基本配置完成后记得输入《重启》</code></pre><p><a href="https://blog.csdn.net/m0_51607907/article/details/123871720">傻妞命令大全</a></p><blockquote><p>这个时候傻妞就配置的差不多了，后续对接了QQ后可以用管理员操作命令</p></blockquote><h3 id="配置pm2"><a href="#配置pm2" class="headerlink" title="配置pm2"></a>配置pm2</h3><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><pre class="language-none"><code class="language-none">apt-get install nodejs</code></pre><h4 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h4><pre class="language-none"><code class="language-none">apt-get install npmnpm --version</code></pre><h4 id="更新node（可选）"><a href="#更新node（可选）" class="headerlink" title="更新node（可选）"></a>更新node（可选）</h4><pre class="language-none"><code class="language-none">npm cache clean -fnpm install -g nn stablenode -v</code></pre><blockquote><p>注：如果当前版本没有变化的话，可以重新打开服务器再看一下</p></blockquote><h4 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h4><pre class="language-none"><code class="language-none">npm install -g pm2</code></pre><h3 id="配置one-bot"><a href="#配置one-bot" class="headerlink" title="配置one-bot"></a>配置one-bot</h3><h4 id="下载one-bot"><a href="#下载one-bot" class="headerlink" title="下载one-bot"></a>下载one-bot</h4><pre class="language-none"><code class="language-none">cd ~ &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;takayama-lily&#x2F;node-onebot.gitmv node-onebot one-bot</code></pre><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>在one-bot的安装目录下存在config.sample.js，将其修改成config.js，然后编辑其内容。</p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/image-20230317014908365.png" alt="image-20230317014908365" loading="lazy"></p><p>内容模板（修改端口+QQ）</p><pre class="language-none"><code class="language-none">module.exports &#x3D; &#123;    &#x2F;&#x2F;通用配置    general: &#123;        platform:           2,      &#x2F;&#x2F;1:安卓手机 2:aPad 3:安卓手表 4:MacOS 5:iPad        debug:              false,  &#x2F;&#x2F;开启debug        use_cqhttp_notice:  true,   &#x2F;&#x2F;是否使用cqhttp标准的notice事件格式        host:               &quot;localhost&quot;,  &#x2F;&#x2F;监听主机名        port:               青龙端口,       &#x2F;&#x2F;端口        use_http:           false,      &#x2F;&#x2F;启用http        use_ws:             false,      &#x2F;&#x2F;启用正向ws，和http使用相同地址和端口        access_token:       &quot;&quot;,         &#x2F;&#x2F;访问api的token        secret:             &quot;&quot;,         &#x2F;&#x2F;上报数据的sha1签名密钥        post_timeout:       30,         &#x2F;&#x2F;post超时时间(秒)        post_message_format:&quot;array&quot;,    &#x2F;&#x2F;&quot;string&quot;或&quot;array&quot;        enable_cors:        false,      &#x2F;&#x2F;是否允许跨域请求        enable_heartbeat:   false,      &#x2F;&#x2F;是否启用ws心跳        heartbeat_interval: 15000,      &#x2F;&#x2F;ws心跳间隔(毫秒)        rate_limit_interval:500,        &#x2F;&#x2F;使用_rate_limited后缀限速调用api的排队间隔时间(毫秒)        event_filter:       &quot;&quot;,         &#x2F;&#x2F;json格式的事件过滤器文件路径        post_url: [ &#x2F;&#x2F;上报地址，可以添加多个url            &#x2F;&#x2F; &quot;http:&#x2F;&#x2F;your.address.com:80&quot;,        ],        ws_reverse_url: [ &#x2F;&#x2F;反向ws地址，可以添加多个url            &quot;ws:&#x2F;&#x2F;localhost:傻妞配置的端口&#x2F;qq&#x2F;receive&quot;,        ],        ws_reverse_reconnect_interval: 3000, &#x2F;&#x2F;反向ws断线重连间隔(毫秒)，设为负数直接不重连        ws_reverse_reconnect_on_code_1000: true, &#x2F;&#x2F;反向ws是否在关闭状态码为1000的时候重连    &#125;,    &#x2F;&#x2F;每个账号的单独配置(用于覆盖通用配置)    QQ号: &#123;    &#125;,&#125;;</code></pre><h4 id="配置机器人QQ"><a href="#配置机器人QQ" class="headerlink" title="配置机器人QQ"></a>配置机器人QQ</h4><p>在one-node目录下使用命令<code>node main QQ号</code>进入交互式命令行，第一次会完成基本QQ的配置，完成后退出即可。</p><h3 id="pm2-启动程序"><a href="#pm2-启动程序" class="headerlink" title="pm2 启动程序"></a>pm2 启动程序</h3><ol><li><p>进入傻妞的安装目录<code>/etc/sillyGirl</code></p><pre class="language-none"><code class="language-none">pm2 start sillyGirl</code></pre></li><li><p>进入one-bot安装目录<code>/root/onebot</code></p><pre class="language-none"><code class="language-none">pm2 start &quot;node main QQ号&quot;</code></pre></li></ol><h3 id="对接青龙"><a href="#对接青龙" class="headerlink" title="对接青龙"></a>对接青龙</h3><p>使用管理员账号给机器人发送<strong>青龙管理</strong>，后续按照提示操作即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;青龙面板搭建&quot;&gt;&lt;a href=&quot;#青龙面板搭建&quot; class=&quot;headerlink&quot; title=&quot;青龙面板搭建&quot;&gt;&lt;/a&gt;青龙面板搭建&lt;/h1&gt;&lt;h2 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="VPS" scheme="https://qianchenjun.github.io/categories/VPS/"/>
    
    
    <category term="青龙面板" scheme="https://qianchenjun.github.io/tags/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Freenom免费域名</title>
    <link href="https://qianchenjun.github.io/posts/20b1d462/"/>
    <id>https://qianchenjun.github.io/posts/20b1d462/</id>
    <published>2022-10-08T02:03:40.000Z</published>
    <updated>2022-10-08T02:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><span id="more"></span></em></p><h2 id="Freenom申请免费域名"><a href="#Freenom申请免费域名" class="headerlink" title="Freenom申请免费域名"></a>Freenom申请免费域名</h2><ol><li><p>美国干净节点</p><blockquote><p>关于美国干净的节点是指：自己搭建的美国节点，或者比较贵的机场提供的节点。</p></blockquote></li><li><p>开启全局模式</p><blockquote><p>clash开启全局模式</p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202303211700502.png" alt="image-20221008154320624" style="zoom: 80%;" / loading="lazy"></blockquote></li><li><p>浏览器开启无痕模式</p></li><li><p>对应美国节点的IP的地址：ipaddress.com</p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202303211700504.png" alt="image-20221008154450345" loading="lazy"></p></li><li><p>美国身份生成：<a href="https://www.meiguodizhi.com/">https://www.meiguodizhi.com/</a></p><blockquote><p>根据自己美国节点的地址生成对应的身份信息</p></blockquote></li><li><p>Freenom官网：<a href="https://www.freenom.com/">https://www.freenom.com/</a></p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202303211700505.png" alt="image-20221008154816647" loading="lazy"></p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202303211700506.png" alt="image-20221008154842621" loading="lazy"></p><p><strong>点击完成跳转到域名注册</strong></p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202303211700507.png" alt="image-20221008154937476" loading="lazy"></p><p><strong>选择12个月免费使用（到期应该可以继续续费）</strong></p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202303211700508.png" alt="image-20221008155047393" loading="lazy"></p><p><strong>输入邮箱开始验证（建议谷歌邮箱）</strong></p><p>后续根据前面提供的美国身份认证一对一填写即可，具体注意姓名、住址、州、电话等信息（信息缺失会导致提交不通过，补全信息即可）</p></li><li><p>把域名托管到CloudFlare：<a href="https://www.cloudflare.com/zh-cn/">https://www.cloudflare.com/zh-cn/</a></p><p>添加域名即可~</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="VPS" scheme="https://qianchenjun.github.io/categories/VPS/"/>
    
    
    <category term="域名" scheme="https://qianchenjun.github.io/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>节点创建</title>
    <link href="https://qianchenjun.github.io/posts/96a44bc5/"/>
    <id>https://qianchenjun.github.io/posts/96a44bc5/</id>
    <published>2022-09-26T08:14:26.000Z</published>
    <updated>2023-08-16T08:42:08.518Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>利用国外的VPS创建一个属于自己的节点。</p><p>本文章适合任意的国外的vps</p></blockquote><p><em><span id="more"></span></em></p><h2 id="一、基础操作"><a href="#一、基础操作" class="headerlink" title="一、基础操作"></a>一、基础操作</h2><blockquote><p>先创建一个虚拟机，镜像选择Debian（后续有个加速需要使用这个系统），大小选择B1s，大约是10美元一个月。</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144528.png" alt="image-20220926195250356" loading="lazy"></p><blockquote><p>向下翻找到管理员账户，根据自己的习惯创建登陆方式</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144529.png" alt="image-20220926195735511" loading="lazy"></p><blockquote><p>剩下就是一直下一步直到创建成功。</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144530.png" alt="image-20220926195524842" loading="lazy"></p><blockquote><p>创建完成，转到资源找到IP地址</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144532.png" alt="image-20220926200120821" loading="lazy"></p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144533.png" alt="image-20220926200157712" loading="lazy"></p><blockquote><p>准备好一个域名，将其解析到目标IP（没有则跳过，但是还是建议）</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144534.png" alt="image-20220926200917509" loading="lazy"></p><blockquote><p>点击左侧的网络，开放进站和出站规则</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144535.png" alt="image-20220926203557079" loading="lazy"></p><blockquote><p>将优先级都设置为100（*代表开放全部端口）</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144536.png" alt="image-20220926203636739" loading="lazy"></p><p><strong>出站规则同理</strong></p><h2 id="二、shell工具操作"><a href="#二、shell工具操作" class="headerlink" title="二、shell工具操作"></a>二、shell工具操作</h2><blockquote><p>使用IP，账号、密码登录VPS进行后续操作（下面的操作都需要在root用户下操作：<code>sudo -i</code>）</p></blockquote><ol><li><p>开启root登入</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> -i</code></pre></li><li><p>开启防火墙</p><pre class="language-shell" data-language="shell"><code class="language-shell">iptables -P INPUT ACCEPTiptables -P FORWARD ACCEPTiptables -P OUTPUT ACCEPTiptables -F<span class="token function">apt-get</span> purge netfilter-persistent<span class="token function">reboot</span></code></pre></li><li><p>申请SSL证书</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 根据系统不同执行不同的命令</span><span class="token function">apt</span> update -y       <span class="token comment"># Debian/Ubuntu 命令</span><span class="token function">apt</span> <span class="token function">install</span> -y <span class="token function">curl</span>   <span class="token comment"># Debian/Ubuntu 命令</span><span class="token function">apt</span> <span class="token function">install</span> -y socat  <span class="token comment"># Debian/Ubuntu 命令</span>yum update -y        <span class="token comment">#CentOS 命令</span>yum <span class="token function">install</span> -y <span class="token function">curl</span>    <span class="token comment">#CentOS 命令</span>yum <span class="token function">install</span> -y socat   <span class="token comment">#CentOS 命令</span></code></pre><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment"># 注意换成自己的邮箱</span>~/.acme.sh/acme.sh --register-account -m xxxx@qq.com<span class="token comment"># 换成自己的域名</span>~/.acme.sh/acme.sh --issue -d naiyou.naiyoubbq.xyz --standalone<span class="token comment"># 换成自己的域名</span>~/.acme.sh/acme.sh --installcert -d naiyou.naiyoubbq.xyz --key-file /root/private.key --fullchain-file /root/cert.crt</code></pre><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144537.png" alt="image-20220926204345543" loading="lazy"></p><blockquote><p>文件位置在后面xray面板会使用到</p></blockquote><pre class="language-none"><code class="language-none">文件位置记录：    更换你的解析域名，此步完成后会在VPS root目录下    看到证书公钥&#x2F;root&#x2F;cert.crt及验证文件&#x2F;root&#x2F;private.key    公钥&#x2F;root&#x2F;cert.crt    验证文件&#x2F;root&#x2F;private.key</code></pre></li><li><p>安装xray面板</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh<span class="token punctuation">)</span></code></pre></li></ol><blockquote><p>根据提示设置用户名、密码端口即可</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144538.png" alt="image-20220926204639802" loading="lazy"></p><blockquote><p>使用IP+端口进入xray面板，并设置公钥和私钥的位置，保存配置，重启面板</p></blockquote><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144539.png" alt="image-20220926204853685" loading="lazy"></p><ol start="5"><li><p>安装bbr加速<strong>（注意此步骤仅限于Debian系统）</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">wget</span> -N --no-check-certificate <span class="token string">"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x tcp.sh <span class="token operator">&amp;&amp;</span> ./tcp.sh</code></pre></li></ol><p>粘贴完之后选择2，等待片刻会弹出一下页面，选择no即可，然后选择<strong>重启服务器</strong></p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144540.png" alt="image-20220926205640943" loading="lazy"></p><p>重新粘贴上述指令，选择7开启bbr加速（开启完成之后再次粘贴查看是否开启成功，不成功就重新连接服务器重复上述步骤）</p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144541.png" alt="image-20220926210002816" loading="lazy"></p><ol start="6"><li><p>创建网站节点</p><p><img src="https://qianchen-image.oss-cn-beijing.aliyuncs.com/blog/202209262144542.png" alt="image-20220926205348365" loading="lazy"></p></li></ol><blockquote><p>创建成功后，点击查看复制链接即可，然后找到一个订阅转换的网站，将链接转成clash专用即可导入clash，或者使用v2ray直接导入</p></blockquote><p>工具网站：<a href="https://v2rayse.com/">https://v2rayse.com/</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;利用国外的VPS创建一个属于自己的节点。&lt;/p&gt;
&lt;p&gt;本文章适合任意的国外的vps&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="VPS" scheme="https://qianchenjun.github.io/categories/VPS/"/>
    
    
    <category term="节点" scheme="https://qianchenjun.github.io/tags/%E8%8A%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用镜像</title>
    <link href="https://qianchenjun.github.io/posts/11a8079c/"/>
    <id>https://qianchenjun.github.io/posts/11a8079c/</id>
    <published>2022-08-06T01:58:42.000Z</published>
    <updated>2022-08-06T01:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><span id="more"></span></em></p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><pre class="language-shell" data-language="shell"><code class="language-shell">#卸载系统之前的docker sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine                                    sudo yum install -y yum-utils# 配置镜像sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo    sudo yum install docker-ce docker-ce-cli containerd.iosudo systemctl start docker# 设置开机自启动sudo systemctl enable dockerdocker -vsudo docker images# 配置镜像加速（阿里云）sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;chqac97z.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h2 id="设置镜像开机自启动"><a href="#设置镜像开机自启动" class="headerlink" title="设置镜像开机自启动"></a>设置镜像开机自启动</h2><pre class="language-shell" data-language="shell"><code class="language-shell">docker update xxx --restart&#x3D;always# 取消操作docker update xxx --restart&#x3D;no</code></pre><h2 id="Mysql镜像"><a href="#Mysql镜像" class="headerlink" title="Mysql镜像"></a>Mysql镜像</h2><pre class="language-shell" data-language="shell"><code class="language-shell">sudo docker pull mysql:5.7# --name指定容器名字 -v目录挂载 -p指定端口映射  -e设置mysql参数 -d后台运行sudo docker run -p 3307:3306 --name mysql \-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql&#x2F; \-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql&#x2F; \-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;my.conf \-e MYSQL_ROOT_PASSWORD&#x3D;y123456... \-d mysql:5.7</code></pre><p>修改配置文件（外部映射）</p><pre class="language-shell" data-language="shell"><code class="language-shell">vim &#x2F;mydata&#x2F;mysql&#x2F;conf&#x2F;my.conf [client]default-character-set&#x3D;utf8[mysql]default-character-set&#x3D;utf8[mysqld]init_connect&#x3D;&#39;SET collation_connection &#x3D; utf8_unicode_ci&#39;init_connect&#x3D;&#39;SET NAMES utf8&#39;character-set-server&#x3D;utf8collation-server&#x3D;utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolvedocker restart mysql</code></pre><p><strong>注意：后续重新测试的时候，mysql设置的默认密码没有生效，而是保持root不变</strong></p><p>修改密码：</p><ol><li>登录docker容器的mysql <code>docker exec -it mysql /bin/bash</code></li><li><code>SET PASSWORD FOR &#39;root&#39;= PASSWORD(&#39;设置的密码&#39;);</code></li><li>重新启动mysql <code>docker restart mysql</code></li></ol><h2 id="Redis镜像"><a href="#Redis镜像" class="headerlink" title="Redis镜像"></a>Redis镜像</h2><blockquote><p>如果直接挂载的话docker会以为挂载的是一个目录，所以我们先创建一个文件然后再挂载，在虚拟机中。</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell"># 在虚拟机中mkdir -p &#x2F;mydata&#x2F;redis&#x2F;conftouch &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.confdocker pull redisdocker run -p 6379:6379 --name redis \-v &#x2F;mydata&#x2F;redis&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf# 直接进去redis客户端。docker exec -it redis redis-cli</code></pre><blockquote><p>Redis默认是不持久化的<strong>（但是目前新版好像自带持久化）</strong>。在配置文件中输入<code>appendonly yes</code>，就可以aof持久化了。修改完<code>docker restart redis，docker -it redis redis-cli</code></p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">vim &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf# 插入下面内容appendonly yes#保存docker restart redis</code></pre><h2 id="Elasticsearch镜像"><a href="#Elasticsearch镜像" class="headerlink" title="Elasticsearch镜像"></a>Elasticsearch镜像</h2><pre class="language-shell" data-language="shell"><code class="language-shell"># 拉取镜像docker pull elasticsearch:7.6.2docker pull kibana:7.6.2# 配置mkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;configmkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;dataecho &quot;http.host: 0.0.0.0&quot; &gt;&#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml# 将mydata&#x2F;elasticsearch&#x2F;文件夹中文件都可读可写chmod -R 777 &#x2F;mydata&#x2F;elasticsearch&#x2F;# 启动elasticsearchdocker run --name elasticsearch -p 9200:9200 -p 9300:9300 \-e  &quot;discovery.type&#x3D;single-node&quot; \-e ES_JAVA_OPTS&#x3D;&quot;-Xms128m -Xmx512m&quot; \-v &#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml \-v &#x2F;mydata&#x2F;elasticsearch&#x2F;data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data \-v &#x2F;mydata&#x2F;elasticsearch&#x2F;plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins \-d elasticsearch:7.6.2 # 开机自启动docker update elasticsearch --restart&#x3D;always# 启动kibanadocker run --name kibana -e ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;服务器地址:9200 -p 5601:5601 -d kibana:7.6.2# 开机自启动docker update kibana --restart&#x3D;always</code></pre><h2 id="Nginx镜像"><a href="#Nginx镜像" class="headerlink" title="Nginx镜像"></a>Nginx镜像</h2><pre class="language-shell" data-language="shell"><code class="language-shell"># 随便启动一个nginx实例，只是为了复制出配置docker run -p 8081:80 --name nginx -d nginx:1.10# 将容器内的配置文件拷贝到&#x2F;mydata&#x2F;nginx&#x2F;conf&#x2F;目录下mkdir -p &#x2F;mydata&#x2F;nginxdocker container cp nginx:&#x2F;etc&#x2F;nginx &#x2F;mydata&#x2F;nginx&#x2F;  # 将nginx下面的nginx文件夹名称改成confmv &#x2F;mydata&#x2F;nginx&#x2F;nginx &#x2F;mydata&#x2F;nginx&#x2F;conf# 终止原容器docker stop nginx# 执行命令删除原容器docker rm nginx# 创建新的Nginx，执行以下命令docker run -p 80:80 --name nginx \ -v &#x2F;mydata&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \ -v &#x2F;mydata&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx \ -v &#x2F;mydata&#x2F;nginx&#x2F;conf&#x2F;:&#x2F;etc&#x2F;nginx \ -d nginx:1.10 # 设置开机启动nginxdocker update nginx --restart&#x3D;always# 创建“&#x2F;mydata&#x2F;nginx&#x2F;html&#x2F;index.html”文件，测试是否能够正常访问echo &#39;&lt;h2&gt;hello nginx!&lt;&#x2F;h2&gt;&#39; &gt;&#x2F;mydata&#x2F;nginx&#x2F;html&#x2F;index.html# 访问：http:&#x2F;&#x2F;ngix所在主机的IP:9090&#x2F;index.html</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="VPS" scheme="https://qianchenjun.github.io/categories/VPS/"/>
    
    
    <category term="Docker" scheme="https://qianchenjun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx简单使用</title>
    <link href="https://qianchenjun.github.io/posts/bfba28e1/"/>
    <id>https://qianchenjun.github.io/posts/bfba28e1/</id>
    <published>2022-06-21T10:15:04.000Z</published>
    <updated>2023-08-16T03:36:50.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx概述"><a href="#Nginx概述" class="headerlink" title="Nginx概述"></a>Nginx概述</h2><h3 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h3><p>​Nginx是一款轻量级的Web 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx的网站有：百度、京东、新浪、网易、腾讯、淘宝等。</p><p>​Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p><p>​<a href="https://nginx.org/">官网地址</a></p><p>​<img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211816253.png" alt="image-20220621181629570" loading="lazy"></p><p><em><span id="more"></span></em></p><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>​是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。<br>​正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。<br>​正向代理一般是在客户端设置代理服务器，通过代理服务器转发请求，最终访问到目标服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211840446.png" alt="image-20220621183956959" loading="lazy"></p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>​反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源，反向代理服务器负责将请求转发给目标服务器。<br>​用户不需要知道目标服务器的地址，也无须在用户端作任何设定。</p><p><img src="E:\图片\typora\image-20220621184047107.png" alt="image-20220621184047107" loading="lazy"></p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>​增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211842804.png" alt="image-20220621184200607" loading="lazy"></p><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211842823.png" alt="image-20220621184224012" loading="lazy"></p><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><ol><li>安装依赖包 <code>yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</code></li><li>下载Nginx安装包<code>wget https://nginx.org/download/nginx-1.16.1.tar.gz</code><ul><li>或者下载地址：<a href="https://file.qianchen.xyz/files/Linux/nginx-1.16.1.tar.gz">Linux下载地址</a></li></ul></li><li>解压 <code>tar -zxvf nginx-1.16.1.tar.gz</code></li><li><code>cd nginx-1.16.1</code></li><li><code>./configure --prefix=/usr/local/nginx</code></li><li><code>make &amp;&amp; make install</code></li></ol><blockquote><p>执行完全部命令你会在<code>/usr/local/</code>下面得到如下文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211820144.png" alt="image-20220621182042022" loading="lazy"></p></blockquote><h3 id="Nginx添加全局变量"><a href="#Nginx添加全局变量" class="headerlink" title="Nginx添加全局变量"></a>Nginx添加全局变量</h3><blockquote><p>此时你只能在&#x2F;sbin目录下执行nginx的相关命令，输入以下命令将Nginx添加到全局变量。</p><p><code>ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/</code></p><p><a href="https://blog.csdn.net/printhellowor1d/article/details/125003650">参考链接</a></p></blockquote><h3 id="Nginx目录结构"><a href="#Nginx目录结构" class="headerlink" title="Nginx目录结构"></a>Nginx目录结构</h3><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211821844.png" alt="image-20220621182127519" loading="lazy"></p><p>重点目录 &#x2F; 文件</p><table><thead><tr><th align="center">目录 &#x2F; 文件</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>conf/nginx.conf</code></td><td align="center">nginx配置文件</td></tr><tr><td align="center"><code>html</code></td><td align="center">存放静态文件（HTML、CSS、JS等）</td></tr><tr><td align="center"><code>logs</code></td><td align="center">日志目录，存放日志文件</td></tr><tr><td align="center"><code>sbin/nginx</code></td><td align="center">二进制文件，用于启动、停止Nginx服务</td></tr></tbody></table><h2 id="Nginx的常用命令和配置文件"><a href="#Nginx的常用命令和配置文件" class="headerlink" title="Nginx的常用命令和配置文件"></a>Nginx的常用命令和配置文件</h2><h3 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h3><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>nginx -v</code></td><td align="center">查看版本</td></tr><tr><td align="center"><code>nginx -t</code></td><td align="center">检查配置文件的正确性</td></tr><tr><td align="center"><code>nginx</code></td><td align="center">启动Nginx服务</td></tr><tr><td align="center"><code>nginx -s stop</code></td><td align="center">停止nginx服务</td></tr><tr><td align="center"><code>nginx -s reload</code></td><td align="center">重新加载配置文件</td></tr></tbody></table><h3 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h3><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211837246.png" alt="image-20220621183703851" loading="lazy"></p><h2 id="Nginx的配置实例"><a href="#Nginx的配置实例" class="headerlink" title="Nginx的配置实例"></a>Nginx的配置实例</h2><h3 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h3><pre class="language-none"><code class="language-none"># 反向代理server &#123;    listen  80;    server_name localhost;    location &#x2F; &#123;        root  html;                  proxy_pass http:&#x2F;&#x2F;localhost:8080;        index index.html index.htm;    &#125;&#125;server &#123;    listen  9001;    server_name localhost;    location ~ &#x2F;edu&#x2F; &#123;        proxy_pass http:&#x2F;&#x2F;localhost:8080;    &#125;    location ~ &#x2F;vod&#x2F; &#123;        proxy_pass http:&#x2F;&#x2F;localhost:8081;    &#125;&#125;</code></pre><h3 id="负载均衡-1"><a href="#负载均衡-1" class="headerlink" title="负载均衡"></a>负载均衡</h3><pre class="language-none"><code class="language-none"># 负载均衡upstream myserver &#123;    server 192.168.200.100:8080;    server 192.168.200.100:8081;&#125;server &#123;    listen  81;    server_name 192.168.200.100;    location &#x2F; &#123;        # 加上负载均衡的名称        proxy_pass http:&#x2F;&#x2F;myserver;        root    html;        index index.html index.htm;    &#125;&#125;</code></pre><h3 id="动静分离-1"><a href="#动静分离-1" class="headerlink" title="动静分离"></a>动静分离</h3><pre class="language-none"><code class="language-none"># 动静分离server &#123;    listen  9000;    server_name 192.168.200.100;    location &#x2F;www&#x2F; &#123;        # 请求的是 &#x2F;www目录        root    &#x2F;data&#x2F;;        index   index.html index.htm;    &#125;    location &#x2F;image&#x2F; &#123;        root    &#x2F;data&#x2F;;        autoindex on;        autoindex_exact_size off;        autoindex_localtime on;    &#125;&#125;</code></pre><h3 id="高可用集群"><a href="#高可用集群" class="headerlink" title="高可用集群"></a>高可用集群</h3><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211849702.png" alt="image-20220621184952457" loading="lazy"></p><blockquote><p>前置条件：需要两台装有<code>nginx</code>和<code>keepalived</code>的虚拟机</p></blockquote><p>步骤：</p><ol><li><p>安装<code>keepalived</code></p><pre class="language-none"><code class="language-none">yum install keepalived –y</code></pre></li><li><p>安装之后，在 <code>etc</code> 目录下生成目录 <code>keepalived</code>，有文件 <code>keepalived.conf</code></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211853342.png" alt="image-20220621185307036" loading="lazy"></p></li><li><p>修改 keepalived.conf 文件</p><pre class="language-none"><code class="language-none">global_defs &#123;notification_email &#123;  acassen@firewall.loc  failover@firewall.loc  sysadmin@firewall.loc&#125;notification_email_from Alexandre.Cassen@firewall.loc  # 主服务器地址，需要更改  smtp_server 192.168.200.100  smtp_connect_timeout 30  router_id LVS_DEVEL&#125;vrrp_script chk_http_port &#123;  # 脚本存放位置  script &quot;&#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx_check.sh&quot;  interval 2#（检测脚本执行的间隔）  weight 2&#125;vrrp_instance VI_1 &#123;  state MASTER# 备份服务器上将 MASTER 改为 BACKUP  interface ens33&#x2F;&#x2F; ifconfig可以查看网卡  virtual_router_id 51# 主、备机的 virtual_router_id 必须相同  priority 100# 主、备机取不同的优先级，主机值较大，备份机值较小  advert_int 1  authentication &#123;    auth_type PASS    auth_pass 1111  &#125;  virtual_ipaddress &#123;    192.168.200.50 &#x2F;&#x2F; VRRP H 虚拟地址  &#125;&#125;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211855231.png" alt="image-20220621185526733" loading="lazy"></p></li><li><p>在 <code>/usr/local/src/</code> 添加 <code>nginx_check.sh</code> 脚本文件</p><pre class="language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashA&#x3D;&#96;ps -C nginx –no-header |wc -l&#96;if [ $A -eq 0 ];then  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx  sleep 2  if [ &#96;ps -C nginx --no-header |wc -l&#96; -eq 0 ];    then killall keepalived  fifi</code></pre></li></ol><blockquote><p>从服务器重复配置步骤3和步骤4。</p></blockquote><ol start="5"><li>配置好后访问虚拟IP即可（192.168.200.50）。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Nginx概述&quot;&gt;&lt;a href=&quot;#Nginx概述&quot; class=&quot;headerlink&quot; title=&quot;Nginx概述&quot;&gt;&lt;/a&gt;Nginx概述&lt;/h2&gt;&lt;h3 id=&quot;Nginx介绍&quot;&gt;&lt;a href=&quot;#Nginx介绍&quot; class=&quot;headerlink&quot; title=&quot;Nginx介绍&quot;&gt;&lt;/a&gt;Nginx介绍&lt;/h3&gt;&lt;p&gt;​		Nginx是一款轻量级的Web 服务器&amp;#x2F;反向代理服务器及电子邮件（IMAP&amp;#x2F;POP3）代理服务器。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx的网站有：百度、京东、新浪、网易、腾讯、淘宝等。&lt;/p&gt;
&lt;p&gt;​		Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。&lt;/p&gt;
&lt;p&gt;​		&lt;a href=&quot;https://nginx.org/&quot;&gt;官网地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;img src=&quot;https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206211816253.png&quot; alt=&quot;image-20220621181629570&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Nginx" scheme="https://qianchenjun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>开发常用配置</title>
    <link href="https://qianchenjun.github.io/posts/11a8079c/"/>
    <id>https://qianchenjun.github.io/posts/11a8079c/</id>
    <published>2022-06-19T16:00:00.000Z</published>
    <updated>2023-08-16T03:36:50.099Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文就开发常用的代码进行了整理，开发过程中复制粘贴即可。</p></blockquote><p><em><span id="more"></span></em></p><h2 id="统一返回结果R"><a href="#统一返回结果R" class="headerlink" title="统一返回结果R"></a>统一返回结果R</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModelProperty</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Date: 2022/6/30 * @Author: Thousand_Star * @Description: 全局统一返回结果类 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"全局统一返回结果"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"状态码"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回消息"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回数据"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 构造返回数据的方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">T</span> body<span class="token punctuation">,</span> <span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*public static &lt;T> R&lt;T> success() &#123;        return R.success(null);    &#125;*/</span>    <span class="token comment">/**     * 操作成功     * @param data     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*public static &lt;T> R&lt;T> fail() &#123;        return fail(null);    &#125;*/</span>    <span class="token comment">/**     * 操作失败     * @param data     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span>FAIL<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span>FAIL<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 更改返回消息的方法     * @param msg     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 更改返回状态码的方法     * @param code     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>可以直接设置返回code，也可以通过接口或者枚举类实现</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Date: 2022/6/30 * @Author: Thousand_Star * @Description: 统一返回结果状态信息类 */</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResultCodeEnum</span> <span class="token punctuation">&#123;</span>    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FAIL</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SERVICE_ERROR</span><span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token string">"服务异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DATA_ERROR</span><span class="token punctuation">(</span><span class="token number">204</span><span class="token punctuation">,</span> <span class="token string">"数据异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ILLEGAL_REQUEST</span><span class="token punctuation">(</span><span class="token number">205</span><span class="token punctuation">,</span> <span class="token string">"非法请求"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REPEAT_SUBMIT</span><span class="token punctuation">(</span><span class="token number">206</span><span class="token punctuation">,</span> <span class="token string">"重复提交"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">LOGIN_AUTH</span><span class="token punctuation">(</span><span class="token number">208</span><span class="token punctuation">,</span> <span class="token string">"未登陆"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PERMISSION</span><span class="token punctuation">(</span><span class="token number">209</span><span class="token punctuation">,</span> <span class="token string">"没有权限"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PHONE_CODE_ERROR</span><span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">,</span> <span class="token string">"手机验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">MTCLOUD_ERROR</span><span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token string">"直播接口异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">COUPON_GET</span><span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token string">"优惠券已经领取"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">COUPON_LIMIT_GET</span><span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">,</span> <span class="token string">"优惠券已发放完毕"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FILE_UPLOAD_ERROR</span><span class="token punctuation">(</span> <span class="token number">21004</span><span class="token punctuation">,</span> <span class="token string">"文件上传错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FILE_DELETE_ERROR</span><span class="token punctuation">(</span> <span class="token number">21005</span><span class="token punctuation">,</span> <span class="token string">"文件刪除错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">VOD_PALY_ERROR</span><span class="token punctuation">(</span><span class="token number">209</span><span class="token punctuation">,</span> <span class="token string">"请购买后观看"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><h2 id="MP代码生成器"><a href="#MP代码生成器" class="headerlink" title="MP代码生成器"></a>MP代码生成器</h2><p><code>pom.xml</code></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><code>CodeGet.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span></span><span class="token class-name">AutoGenerator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">DataSourceConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">GlobalConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">PackageConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">StrategyConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span></span><span class="token class-name">NamingStrategy</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1、创建代码生成器</span>        <span class="token class-name">AutoGenerator</span> mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、全局配置</span>        <span class="token comment">// 全局配置</span>        <span class="token class-name">GlobalConfig</span> gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> projectPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//gc.setOutputDir(projectPath + "/src/main/java");</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span><span class="token string">"E:\\code\\workspace\\ggkt_parent\\service\\service_vod"</span><span class="token operator">+</span><span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去掉Service接口的首字母I</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"Thousand_Star"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3、数据源配置</span>        <span class="token class-name">DataSourceConfig</span> dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/glkt_vod?serverTimezone=GMT%2B8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4、包配置</span>        <span class="token class-name">PackageConfig</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"xyz.qianchen.ggkt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span><span class="token string">"vod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//模块名</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5、策略配置</span>        <span class="token class-name">StrategyConfig</span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"teacher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据库表映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据库表字段映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//restful api风格控制器</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//url中驼峰转连字符</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 6、执行</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><h2 id="MP简单配置类"><a href="#MP简单配置类" class="headerlink" title="MP简单配置类"></a>MP简单配置类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"xxx.xxx.xxx.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * MyBatis-Plus的相关插件     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建拦截器</span>        <span class="token class-name">MybatisPlusInterceptor</span> mybatisPlusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 加入分页拦截器</span>        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mybatisPlusInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><h2 id="MP字段自动填充配置类"><a href="#MP字段自动填充配置类" class="headerlink" title="MP字段自动填充配置类"></a>MP字段自动填充配置类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">MetaObjectHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>prism<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">BaseContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span><span class="token class-name">MetaObject</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start insert fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"gmtCreate"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start update fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><h2 id="SpringBoot整合Redis的配置类"><a href="#SpringBoot整合Redis的配置类" class="headerlink" title="SpringBoot整合Redis的配置类"></a>SpringBoot整合Redis的配置类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonAutoDetect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertyAccessor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CachingConfigurerSupport</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableCaching</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">Jackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//key序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value序列化</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value hashmap序列化</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解决查询缓存转换异常的问题</span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span>        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><h2 id="logback日志配置类"><a href="#logback日志配置类" class="headerlink" title="logback日志配置类"></a>logback日志配置类</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --></span>    <span class="token comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --></span>    <span class="token comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --></span>    <span class="token comment">&lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">></span></span>logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>E:/code/Log/guli_log/edu<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 彩色日志 --></span>    <span class="token comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --></span>    <span class="token comment">&lt;!-- magenta:洋红 --></span>    <span class="token comment">&lt;!-- boldMagenta:粗红--></span>    <span class="token comment">&lt;!-- cyan:青色 --></span>    <span class="token comment">&lt;!-- white:白色 --></span>    <span class="token comment">&lt;!-- magenta:洋红 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--输出到控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--></span>        <span class="token comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pattern</span><span class="token punctuation">></span></span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Pattern</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 设置字符集 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--输出到文件--></span>    <span class="token comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 正在记录的日志文件的路径及文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>$&#123;log.path&#125;/log_info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--日志文件输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 每天日志归档路径以及格式 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 此日志文件只记录info级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 正在记录的日志文件的路径及文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>$&#123;log.path&#125;/log_warn.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--日志文件输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 此处设置字符集 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 此日志文件只记录warn级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 正在记录的日志文件的路径及文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>$&#123;log.path&#125;/log_error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--日志文件输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 此处设置字符集 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 此日志文件只记录ERROR级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        &lt;logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender>。        &lt;logger>仅有一个name属性，        一个可选的level和一个可选的addtivity属性。        name:用来指定受此logger约束的某一个包或者具体的某一个类。        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，              如果未设置此属性，那么当前logger将会继承上级的级别。    --></span>    <span class="token comment">&lt;!--        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：        第一种把&lt;root level="INFO">改成&lt;root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：     --></span>    <span class="token comment">&lt;!--开发环境:打印控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.guli<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG            可以包含零个或多个appender元素。        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--生产环境:输出到文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><br><h2 id="SpringBoot常用配置yml"><a href="#SpringBoot常用配置yml" class="headerlink" title="SpringBoot常用配置yml"></a>SpringBoot常用配置yml</h2><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token comment"># 端口</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token comment"># 服务名称</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>edu  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token comment"># 环境设置</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev  <span class="token comment"># mysql数据库连接</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/guli<span class="token punctuation">?</span>serverTimezone=GMT%2B8    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">333</span>  <span class="token comment"># 返回json的全局时间格式</span>  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8  <span class="token comment">#nacos服务地址</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token comment"># redis相关配置</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">1800000</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token comment"># mybatis日志</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> isDeleted <span class="token comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span>      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 逻辑已删除值(默认为 1)</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 逻辑未删除值(默认为 0)</span>  <span class="token comment"># 配置mapper的xml文件的路径</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>xyz/qianchen/eduservice/mapper/xml/<span class="token important">*.xml</span></code></pre><br><h2 id="Swagger配置类"><a href="#Swagger配置类" class="headerlink" title="Swagger配置类"></a>Swagger配置类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Predicates</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Contact</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">webApiConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"webApi"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// webApiInfo()设置文档相关信息</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// .paths(Predicates.not(PathSelectors.regex("/admin/.*")))</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">Predicates</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">"/error.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"网站-课程中心API文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"本文档描述了课程中心微服务接口定义"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"Thousand_Star"</span><span class="token punctuation">,</span> <span class="token string">"https://www.qianchen.xyz/"</span><span class="token punctuation">,</span> <span class="token string">"qianchen17418@gmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><h2 id="上述依赖的pom文件"><a href="#上述依赖的pom文件" class="headerlink" title="上述依赖的pom文件"></a>上述依赖的pom文件</h2><pre class="language-xml" data-language="xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        &lt;mybatis-plus.version>3.0.5&lt;/mybatis-plus.version>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-plus.version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-plus.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>velocity.version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>velocity.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger.version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jodatime.version</span><span class="token punctuation">></span></span>2.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jodatime.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>poi.version</span><span class="token punctuation">></span></span>3.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>poi.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-fileupload.version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-fileupload.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-io.version</span><span class="token punctuation">></span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-io.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpclient.version</span><span class="token punctuation">></span></span>4.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpclient.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jwt.version</span><span class="token punctuation">></span></span>0.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jwt.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">></span></span>1.2.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gson.version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gson.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>json.version</span><span class="token punctuation">></span></span>20170516<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>json.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-dbutils.version</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-dbutils.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canal.client.version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canal.client.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>docker.image.prefix</span><span class="token punctuation">></span></span>zx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>docker.image.prefix</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cloud-alibaba.version</span><span class="token punctuation">></span></span>0.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cloud-alibaba.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--Spring Cloud--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;cloud-alibaba.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--mybatis-plus 持久层--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mybatis-plus.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;velocity.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--swagger--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;swagger.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--swagger ui--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;swagger.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--日期时间工具--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;jodatime.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--xls--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;poi.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--xlsx--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;poi.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--文件上传--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;commons-fileupload.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--commons-io--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;commons-io.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--httpclient--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;httpclient.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;gson.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- JWT --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;jwt.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;commons-dbutils.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文就开发常用的代码进行了整理，开发过程中复制粘贴即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://qianchenjun.github.io/tags/Java/"/>
    
    <category term="配置" scheme="https://qianchenjun.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从复制</title>
    <link href="https://qianchenjun.github.io/posts/c813917a/"/>
    <id>https://qianchenjun.github.io/posts/c813917a/</id>
    <published>2022-05-02T02:46:03.000Z</published>
    <updated>2023-08-16T03:36:50.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方式一：MySQL自带"><a href="#方式一：MySQL自带" class="headerlink" title="方式一：MySQL自带"></a>方式一：MySQL自带</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>MySQL主从复制是一个异步的复制过程，底层是基于MySq1数据库自带的<strong>二进制日志</strong>功能。就是一台或多台MySQL数据库（slave，即从库）从另一台MySQL数据库（master，即<strong>主库</strong>）进行日志的复制然后再解析日志并应用到自身，最终实现<strong>从库</strong>的数据和<strong>主库</strong>的数据保持一致。MySQL主从复制是MySQL数据库自带功能，无需借助第三方工具。</p><p>MySQL复制过程分为三步：</p><ul><li>master将改变记录到二进制位日志（binary log）</li><li>slave将master的binary log拷贝到它的中继日志（relay log）</li><li>slave重做中继日志的时间，将改变应用到自己的的数据库中</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205021313053.png" alt="image-20220502123118613" loading="lazy"></p><p><em><span id="more"></span></em></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h4><p>提前准备好两台服务器，分别安装MySQL并启动服务成功</p><ul><li>主库Master：192.168.200.100</li><li>从库Slave：192.168.200.101</li></ul><blockquote><p>这里我使用了VMware来安装虚拟机，配置好一台虚拟机后通过复制虚拟机来制作另外一台虚拟机。</p><p><strong>注意：这里如果另一台虚拟机是复制出来的话会导致两个MySQL的UUID相同，后面操作会有个小坑。</strong></p></blockquote><h4 id="主库Master"><a href="#主库Master" class="headerlink" title="主库Master"></a>主库Master</h4><ol><li><p>修改MySQL数据库配置文件 <code>/etc/my.cnf</code></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205021313054.png" alt="image-20220502123727198" loading="lazy"></p></li><li><p>重启MySQL服务</p><pre class="language-shell" data-language="shell"><code class="language-shell">systemctl restart mysqld</code></pre></li><li><p>登录MySQL数据库，执行下面的SQL</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> SLAVE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'tom'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'Root@123456'</span><span class="token punctuation">;</span></code></pre><p>注：上面SQL的作用是创建一个用户<strong>tom</strong>，密码为<strong>Root@123456</strong>，并且给tom用户授予<strong>REPLICATION SLAVE</strong>权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。</p></li><li><p>登录MySQL数据库，执行下面的SQL，记录下结果中<strong>File</strong>和<strong>Position</strong>的值</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205021313055.png" alt="image-20220502124443083" loading="lazy"></p><p>注：上面的SQL的作用是查看Master的状态，执行完此SQL后不要再执行任何操作</p></li></ol><h4 id="从库Slave"><a href="#从库Slave" class="headerlink" title="从库Slave"></a>从库Slave</h4><ol><li><p>修改MySQL数据库配置文件 <code>/etc/my.cnf</code></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205021313056.png" alt="image-20220502124639846" loading="lazy"></p></li><li><p>重启MySQL服务</p><pre class="language-shell" data-language="shell"><code class="language-shell">systemct restart mysqld</code></pre></li><li><p>登录MysQL数据库，执行下面的SQL</p><pre class="language-sql" data-language="sql"><code class="language-sql">change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'192.168.200.100'</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">'tom'</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">'Root@123456'</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000002'</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">42634</span><span class="token punctuation">;</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span></code></pre><p>注：<code>master_host</code>是主数据库的<code>ip</code>，<code>master_user</code>和<code>master_password</code>是刚才创建的用户名和密码，<code>master_log_file</code>和<code>master_log_pos</code>是主库的状态。</p></li><li><p>查看从库的状态</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> slave <span class="token keyword">status</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205021313058.png" alt="image-20220502125417011" loading="lazy"></p><p>日志文件中显示这两个地方是Yes则代表成功</p></li></ol><h4 id="从库状态No的处理"><a href="#从库状态No的处理" class="headerlink" title="从库状态No的处理"></a>从库状态No的处理</h4><p><strong>问题：从库所在虚拟机是主库复制出来的</strong></p><p>查看UUID：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%server_uuid%'</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205021313059.png" alt="image-20220502125959457" loading="lazy"></p><blockquote><p>这会导致主机和从机的UUID一致。</p></blockquote><p>解决：分别在主库和从库执行以下命令</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">rm</span> -rf ./mysql/data/auto.cnf<span class="token function">rm</span> -rf /var/lib/mysql/auto.cnf</code></pre><p>执行完毕后重启服务器</p><h2 id="方式二：Canal实现数据库复制"><a href="#方式二：Canal实现数据库复制" class="headerlink" title="方式二：Canal实现数据库复制"></a>方式二：Canal实现数据库复制</h2><blockquote><p>canal是阿里巴巴旗下的一款开源项目，纯Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费，目前主要支持了MySQL。</p></blockquote><blockquote><p>注意：需要复制的两个MySQL数据库需要保证<strong>完全一致</strong>，即库名称、表名称和表结构完全一致。</p></blockquote><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><blockquote><p>canal的原理是基于mysql binlog技术，所以这里一定需要开启mysql的binlog写入功能</p></blockquote><ol><li><p>检查binlog功能是否开启</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;log_bin&#39;;+---------------+-------+| Variable_name | Value |+---------------+-------+| log_bin |  OFF  |+---------------+-------+1 row in set (0.00 sec)</code></pre></li><li><p>如果显示状态为OFF表示该功能未开启，开启binlog功能</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">(1)修改 mysql 的配置文件 my.cnfvi &#x2F;etc&#x2F;my.cnf追加内容：log-bin&#x3D;mysql-bin #binlog文件名binlog_format&#x3D;ROW #选择row模式server_id&#x3D;1 #mysql实例id,不能和canal的slaveId重复(2)重启 mysql：systemctl restart mysqld(3)登录 mysql 客户端，查看 log_bin 变量 mysql&gt; show variables like &#39;log_bin&#39;; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | log_bin | ON| +---------------+-------+ 1 row in set (0.00 sec) ———————————————— 如果显示状态为ON表示该功能已开启</code></pre></li><li><p>在mysql里面添加以下的相关用户和权限</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE USER &#39;canal&#39;@&#39;%&#39; IDENTIFIED BY &#39;canal&#39;;GRANT SHOW VIEW, SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO&#39;canal&#39;@&#39;%&#39;;FLUSH PRIVILEGES;</code></pre><blockquote><p>这一步的作用其实就是创建一个用户来完成数据库的操作。需要这个用户拥有远程访问数据库的功能，同样也是可以通过修改root的权限来让root用户拥有远程登陆的权限。</p></blockquote></li></ol><h3 id="下载和安装Canal"><a href="#下载和安装Canal" class="headerlink" title="下载和安装Canal"></a>下载和安装Canal</h3><p>下载地址：<a href="https://github.com/alibaba/canal/releases">Canal的Github仓库</a></p><ol><li><p>解压Canal</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172212860.png" alt="image-20220617221239952" loading="lazy"></p></li><li><p>修改配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172214867.png" loading="lazy"></p><ol><li>将address更换成虚拟机的地址</li></ol><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172214867.png" loading="lazy"></p><ol start="2"><li><p>修改用户名和密码（我这里的root拥有远程访问的权限）</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172216178.png" alt="image-20220617221650732" loading="lazy"></p></li><li><p>修改同步数据库的规则</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172218705.png" alt="image-20220617221852520" loading="lazy"></p><blockquote><p>注：</p><p>mysql 数据解析关注的表，Perl正则表达式.</p><p>多个正则之间以逗号(,)分隔，转义符需要双斜杠(\) </p><p>常见例子：</p><ol><li>所有表：<code>.* or .*\\..*</code></li><li>canal schema下所有表： <code>canal\\..*</code></li><li>canal下的以canal打头的表：<code>canal\\.canal.*</code></li><li>canal schema下的一张表：<code>canal.test1</code></li><li>多个规则组合使用：<code>canal\\..*,mysql.test1,mysql.test2 (逗号分隔)</code></li></ol><p><strong>注意：此过滤条件只针对row模式的数据有效(ps. mixed&#x2F;statement因为不解析sql，所以无法准确提取tableName进行过滤)</strong></p></blockquote></li></ol></li><li><p>进入bin目录启动</p><p><code>sh bin/startup.sh</code></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172221548.png" alt="image-20220617222137764" loading="lazy"></p></li></ol><blockquote><p>截至目前我们在Linux的配置已经完成了</p></blockquote><h3 id="SpringBoot操作"><a href="#SpringBoot操作" class="headerlink" title="SpringBoot操作"></a>SpringBoot操作</h3><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172222943.png" alt="image-20220617222255555" loading="lazy"></p><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--mysql--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.otter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>canal.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><pre class="language-yml" data-language="yml"><code class="language-yml">server:  # 端口  port: 10000spring:  application:    # 服务名称    name: canal-client  profiles:    # 环境设置    active: dev  # mysql数据库连接  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;guli?serverTimezone&#x3D;GMT%2B8    username: root    password: 333</code></pre><h4 id="CanalClient-java"><a href="#CanalClient-java" class="headerlink" title="CanalClient.java"></a>CanalClient.java</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">CanalConnector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">CanalConnectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span></span><span class="token class-name">CanalEntry</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span></span><span class="token class-name">InvalidProtocolBufferException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">DbUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">QueryRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentLinkedQueue</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanalClient</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//sql队列</span>    <span class="token keyword">private</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> SQL_QUEUE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>    <span class="token comment">/**     * canal入库方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CanalConnector</span> connector <span class="token operator">=</span> <span class="token class-name">CanalConnectors</span><span class="token punctuation">.</span><span class="token function">newSingleConnector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"192.168.200.100"</span><span class="token punctuation">,</span>                <span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"example"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> batchSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connector<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">".*\\..*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//尝试从master那边拉去数据batchSize条记录，有多少取多少</span>                    <span class="token class-name">Message</span> message <span class="token operator">=</span> connector<span class="token punctuation">.</span><span class="token function">getWithoutAck</span><span class="token punctuation">(</span>batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> batchId <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> size <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>batchId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token function">dataHandle</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    connector<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>batchId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//当队列里面堆积的sql大于一定数值的时候就模拟执行</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>SQL_QUEUE<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">executeQueueSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidProtocolBufferException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            connector<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 模拟执行队列里面的sql语句     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeQueueSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> SQL_QUEUE<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> SQL_QUEUE<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[sql]----> "</span> <span class="token operator">+</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 数据处理     *     * @param entrys     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dataHandle</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">></span></span> entrys<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvalidProtocolBufferException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">:</span> entrys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">EntryType</span><span class="token punctuation">.</span>ROWDATA <span class="token operator">==</span> entry<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">RowChange</span> rowChange <span class="token operator">=</span> <span class="token class-name">RowChange</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getStoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">EventType</span> eventType <span class="token operator">=</span> rowChange<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> <span class="token class-name">EventType</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">saveDeleteSql</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> <span class="token class-name">EventType</span><span class="token punctuation">.</span>UPDATE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">saveUpdateSql</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> <span class="token class-name">EventType</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">saveInsertSql</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 保存更新语句     *     * @param entry     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveUpdateSql</span><span class="token punctuation">(</span><span class="token class-name">Entry</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RowChange</span> rowChange <span class="token operator">=</span> <span class="token class-name">RowChange</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getStoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RowData</span><span class="token punctuation">></span></span> rowDatasList <span class="token operator">=</span> rowChange<span class="token punctuation">.</span><span class="token function">getRowDatasList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RowData</span> rowData <span class="token operator">:</span> rowDatasList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Column</span><span class="token punctuation">></span></span> newColumnList <span class="token operator">=</span> rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">StringBuffer</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"update "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" set "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newColumnList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> newColumnList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">" = '"</span> <span class="token operator">+</span> newColumnList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> newColumnList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" where "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Column</span><span class="token punctuation">></span></span> oldColumnList <span class="token operator">=</span> rowData<span class="token punctuation">.</span><span class="token function">getBeforeColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Column</span> column <span class="token operator">:</span> oldColumnList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getIsKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//暂时只支持单一主键</span>                        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> column<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                SQL_QUEUE<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidProtocolBufferException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 保存删除语句     *     * @param entry     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveDeleteSql</span><span class="token punctuation">(</span><span class="token class-name">Entry</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RowChange</span> rowChange <span class="token operator">=</span> <span class="token class-name">RowChange</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getStoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RowData</span><span class="token punctuation">></span></span> rowDatasList <span class="token operator">=</span> rowChange<span class="token punctuation">.</span><span class="token function">getRowDatasList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RowData</span> rowData <span class="token operator">:</span> rowDatasList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Column</span><span class="token punctuation">></span></span> columnList <span class="token operator">=</span> rowData<span class="token punctuation">.</span><span class="token function">getBeforeColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">StringBuffer</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"delete from "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" where "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Column</span> column <span class="token operator">:</span> columnList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getIsKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//暂时只支持单一主键</span>                        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> column<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                SQL_QUEUE<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidProtocolBufferException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 保存插入语句     *     * @param entry     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveInsertSql</span><span class="token punctuation">(</span><span class="token class-name">Entry</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RowChange</span> rowChange <span class="token operator">=</span> <span class="token class-name">RowChange</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getStoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RowData</span><span class="token punctuation">></span></span> rowDatasList <span class="token operator">=</span> rowChange<span class="token punctuation">.</span><span class="token function">getRowDatasList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RowData</span> rowData <span class="token operator">:</span> rowDatasList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Column</span><span class="token punctuation">></span></span> columnList <span class="token operator">=</span> rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">StringBuffer</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"insert into "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>columnList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> columnList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">") VALUES ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span> <span class="token operator">+</span> columnList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> columnList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SQL_QUEUE<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidProtocolBufferException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 入库     * @param sql     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> sql<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            con <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">QueryRunner</span> qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> row <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update: "</span><span class="token operator">+</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DbUtils</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="CanalApplication-java"><a href="#CanalApplication-java" class="headerlink" title="CanalApplication.java"></a>CanalApplication.java</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">xyz<span class="token punctuation">.</span>qianchen<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">CanalClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanalApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">CanalClient</span> canalClient<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CanalApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strings<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//项目启动，执行canal客户端监听</span>        canalClient<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>创建好所有的文件后启动Spring Boot程序</p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>虚拟机操作</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172229105.png" alt="image-20220617222940848" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172231789.png" alt="image-20220617223112684" loading="lazy"></p><p>本地数据库</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202206172230530.png" alt="image-20220617223030566" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;方式一：MySQL自带&quot;&gt;&lt;a href=&quot;#方式一：MySQL自带&quot; class=&quot;headerlink&quot; title=&quot;方式一：MySQL自带&quot;&gt;&lt;/a&gt;方式一：MySQL自带&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;MySQL主从复制是一个异步的复制过程，底层是基于MySq1数据库自带的&lt;strong&gt;二进制日志&lt;/strong&gt;功能。就是一台或多台MySQL数据库（slave，即从库）从另一台MySQL数据库（master，即&lt;strong&gt;主库&lt;/strong&gt;）进行日志的复制然后再解析日志并应用到自身，最终实现&lt;strong&gt;从库&lt;/strong&gt;的数据和&lt;strong&gt;主库&lt;/strong&gt;的数据保持一致。MySQL主从复制是MySQL数据库自带功能，无需借助第三方工具。&lt;/p&gt;
&lt;p&gt;MySQL复制过程分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master将改变记录到二进制位日志（binary log）&lt;/li&gt;
&lt;li&gt;slave将master的binary log拷贝到它的中继日志（relay log）&lt;/li&gt;
&lt;li&gt;slave重做中继日志的时间，将改变应用到自己的的数据库中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205021313053.png&quot; alt=&quot;image-20220502123118613&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="mysql" scheme="https://qianchenjun.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Redis简单使用</title>
    <link href="https://qianchenjun.github.io/posts/c4599bc1/"/>
    <id>https://qianchenjun.github.io/posts/c4599bc1/</id>
    <published>2022-05-02T01:32:52.000Z</published>
    <updated>2023-08-16T03:36:50.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基本配置"><a href="#Redis基本配置" class="headerlink" title="Redis基本配置"></a>Redis基本配置</h2><blockquote><p><a href="https://redis.io/">Redis官网</a></p></blockquote><h3 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ol><li>将Redis安装包上传到Linux</li><li>解压安装包，命令：<code>tar -zxvg redis-4.0.0.tar.gz -C /usr/local</code></li><li>安装Redis的依赖环境gcc，命令：<code>yum install gcc-c++</code></li><li>进入 <code>/usr/local/redis-4.0.0</code>，进行编译，命令：<code>make</code></li><li>进入 redis 的 src 目录，进行安装，命令：<code>make install</code></li></ol><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>解压绿色版本即可。</p><h3 id="Redis的启动"><a href="#Redis的启动" class="headerlink" title="Redis的启动"></a>Redis的启动</h3><h4 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h4><ol><li>进入 Redis 的src路径，命令：<code>cd /usr/local/redis-4.0.0/src</code></li><li>打开 Redis 的服务器，命令：<code>./redis-server</code></li><li>打开 Redis 的客户端，命令：<code>./redis-cli</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702255.png" alt="image-20220430104337768" loading="lazy"></p><p>注意：<strong>此时的服务端启动会霸占整个屏幕</strong></p><p>优化启动：</p><ol><li><p>进入 Redis 的安装路径，命令：<code>cd /usr/local/redis-4.0.0</code></p></li><li><p>编辑 Redis 的配置文件，命令：<code>vim redis.conf</code></p></li><li><p>输入 <code>/daemonize</code></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702256.png" alt="image-20220430104620471" loading="lazy"></p></li><li><p>将 no 改成 yes，保存即可</p></li><li><p>在当前目录 <code>redis-4.0.0</code> 启动 Redis，命令：<code>src/redis-server ./redis.conf</code></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702257.png" alt="image-20220430104934443" loading="lazy"></p></li></ol><h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><blockquote><p>双击启动即可</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702258.png" alt="image-20220430111454453" loading="lazy"></p><h3 id="Redis设置密码"><a href="#Redis设置密码" class="headerlink" title="Redis设置密码"></a>Redis设置密码</h3><ol><li><p>编辑 Redis 的配置文件，命令：<code>vim redis.conf</code></p></li><li><p>查找 <code>requirepass</code>，命令：<code>/requirepass</code></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702259.png" alt="image-20220430110654190" loading="lazy"></p><blockquote><p>打开注释，并把后面的字母改成自己的密码</p></blockquote></li><li><p>重启 Redis 服务</p></li></ol><h3 id="Redis设置远程访问"><a href="#Redis设置远程访问" class="headerlink" title="Redis设置远程访问"></a>Redis设置远程访问</h3><blockquote><p>默认 Redis 不设置的话是只能本机访问。</p><p><b style="color: #FF0000">注意：如果需要远程访问，一定要设置密码</b></p></blockquote><ol><li><p>编辑 Redis 的配置文件，命令：<code>vim redis.conf</code></p></li><li><p>查找 <code>bind</code>，命令：<code>/bind</code></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702260.png" alt="image-20220430110957357" loading="lazy"></p></li><li><p>将 <code>bind 127.0.0.1</code> 注释掉</p></li><li><p>重启服务器</p></li></ol><blockquote><p>在 Windows 测试访问，命令：<code>.\redis-cli.exe -h 192.168.222.130 -p 6379 -a 333</code></p><p>参数：</p><ol><li>-h：host，指定ip</li><li>-p：port，指定端口</li><li>-a：auth，指定密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702261.png" alt="image-20220430111240037" loading="lazy"></p></blockquote><h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><h3 id="Redis-常用的数据类型"><a href="#Redis-常用的数据类型" class="headerlink" title="Redis 常用的数据类型"></a>Redis 常用的数据类型</h3><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702262.png" alt="image-20220430111934350" loading="lazy"><em>Redis常用的数据类型</em></p><h3 id="字符串-string-操作命令"><a href="#字符串-string-操作命令" class="headerlink" title="字符串 string 操作命令"></a>字符串 string 操作命令</h3><p>Redis 中字符串类型的常用命令：</p><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>SET key value</code></td><td align="center">设置指定 <code>key</code> 的值</td></tr><tr><td align="center"><code>GET key</code></td><td align="center">获取指定 <code>key</code> 的值</td></tr><tr><td align="center"><code>SETEX key seconds value</code></td><td align="center">设置指定 <code>key</code> 的值，并将 <code>key</code> 的过期时间设为 <code>seconds</code> 秒</td></tr><tr><td align="center"><code>SETNX key value</code></td><td align="center">只有在 <code>key</code> 不存在时设置 <code>key</code> 的值</td></tr></tbody></table><p>操作演示：</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702263.png" alt="image-20220430115818489" loading="lazy"></p><h3 id="哈希-hash-操作命令"><a href="#哈希-hash-操作命令" class="headerlink" title="哈希 hash 操作命令"></a>哈希 hash 操作命令</h3><p>Redis hash 是一个string类型的 field 和 value 的映射表，hash特别适合用于存储对象。</p><p>常用命令：</p><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>HSET key field value</code></td><td align="center">将哈希表 <code>key</code> 中的字段 <code>field</code> 的值设为 <code>value</code></td></tr><tr><td align="center"><code>HGET key field</code></td><td align="center">获取存储在哈希表中指定字段的值</td></tr><tr><td align="center"><code>HDEL key field</code></td><td align="center">删除存储在哈希表中的指定字段</td></tr><tr><td align="center"><code>HKEYS key</code></td><td align="center">获取哈希表中所有字段</td></tr><tr><td align="center"><code>HVALS key</code></td><td align="center">获取哈希表中所有值</td></tr><tr><td align="center"><code>HGETALL key</code></td><td align="center">获取在哈希表中指定 <code>key</code> 的所有字段和值</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702264.png" alt="image-20220430114539477" loading="lazy"><em>Hash结构图示</em></p><p>操作演示：</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702265.png" alt="image-20220430163333768" loading="lazy"></p><h3 id="列表-list-操作命令"><a href="#列表-list-操作命令" class="headerlink" title="列表 list 操作命令"></a>列表 list 操作命令</h3><p>Redis列表是简单的字符串列表，<strong>按照插入序列排序</strong>。</p><p>常用命令：</p><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>LPUSH key value1 [value2]</code></td><td align="center">将一个或多个值插入到列表头部</td></tr><tr><td align="center"><code>LRANGE key start stop</code></td><td align="center">获取列表指定范围内的元素</td></tr><tr><td align="center"><code>RPOP key</code></td><td align="center">移除并获取列表最后一个元素</td></tr><tr><td align="center"><code>LLEN key</code></td><td align="center">获取列表长度</td></tr><tr><td align="center"><code>BRPOP key1 [key2] timeout</code></td><td align="center">移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表<br>直到等待超时或发现可弹出元素为止</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702266.png" alt="image-20220430163826113" loading="lazy"><em>列表结构图示</em></p><p>操作演示：</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702267.png" alt="image-20220430164415452" loading="lazy"></p><h3 id="无序集合-set-操作命令"><a href="#无序集合-set-操作命令" class="headerlink" title="无序集合 set 操作命令"></a>无序集合 set 操作命令</h3><p>Redis set是string类型的<strong>无序</strong>集合。集合成员是<strong>唯一</strong>的，这就意味着<strong>集合中不能出现重复的数据</strong>。</p><p>常用命令：</p><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>SADD key member1 [member2]</code></td><td align="center">向集合添加一个或多个成员</td></tr><tr><td align="center"><code>SMEMBERS key</code></td><td align="center">返回集合中所有的成员</td></tr><tr><td align="center"><code>SCARD key</code></td><td align="center">获取集合的成员数</td></tr><tr><td align="center"><code>SINTER key1 [key2]</code></td><td align="center">返回给定所有集合的交集</td></tr><tr><td align="center"><code>SUNION key1 [key2]</code></td><td align="center">返回所有给定集合的并集</td></tr><tr><td align="center"><code>SDIFF key1 [key2]</code></td><td align="center">返回给定所有集合的差集</td></tr><tr><td align="center"><code>SREM key member1 [member2]</code></td><td align="center">移除集合中一个或多个成员</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702268.png" alt="image-20220430164856975" loading="lazy"><em>无序集合结构图示</em></p><p>操作演示：</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702269.png" alt="image-20220430165712386" loading="lazy"></p><h3 id="有序集合-sorted-set-操作命令"><a href="#有序集合-sorted-set-操作命令" class="headerlink" title="有序集合 sorted set 操作命令"></a>有序集合 sorted set 操作命令</h3><p>Redis sorted set有序集合是string类型元素的集合，且不允许重复的成员。每个元素都会关联一个double类型的分数(score)。redis正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。<br>常用命令：</p><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>ZADD key socre1 member1 [score2 member2]</code></td><td align="center">向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td align="center"><code>ZRANGE key start stop [WITHSCORES]</code></td><td align="center">通过索引区间返回有序集合中指定区间内的成员</td></tr><tr><td align="center"><code>ZINCRBY key increment member</code></td><td align="center">有序集合中对指定成员的分数加上增量 <code>increment</code></td></tr><tr><td align="center"><code>ZREM key member [member ...]</code></td><td align="center">移除有序集合中的一个或多个成员</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702270.png" alt="image-20220430170244192" loading="lazy"><em>有序集合结构体图示</em></p><p>操作演示：</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702271.png" alt="image-20220430171133223" loading="lazy"></p><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>KEYS pattern</code></td><td align="center">查找所有符合给定模式<code>（pattern）</code>的 <code>key</code></td></tr><tr><td align="center"><code>EXISTS key</code></td><td align="center">检查给定 <code>key </code>是否存在</td></tr><tr><td align="center"><code>TYPE key</code></td><td align="center">返回 key 所储存的值的类型</td></tr><tr><td align="center"><code>TTL key</code></td><td align="center">返回给定 <code>key </code>的剩余生存时间<code>（TTL，time to live）</code>，以秒为单位</td></tr><tr><td align="center"><code>DEL key</code></td><td align="center">该命令用于在 <code>key </code>存在时删除 <code>key</code></td></tr></tbody></table><p>操作演示：</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202205011702272.png" alt="image-20220430171720850" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis基本配置&quot;&gt;&lt;a href=&quot;#Redis基本配置&quot; class=&quot;headerlink&quot; title=&quot;Redis基本配置&quot;&gt;&lt;/a&gt;Redis基本配置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://redis.io/&quot;&gt;R</summary>
      
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Redis" scheme="https://qianchenjun.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>关于博客那些事</title>
    <link href="https://qianchenjun.github.io/posts/23f71013/"/>
    <id>https://qianchenjun.github.io/posts/23f71013/</id>
    <published>2022-04-26T05:54:24.000Z</published>
    <updated>2023-08-16T03:36:50.092Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近随着gitee图床加了防盗链，我的Github page 上面的博客图片全部失效….</p><p>过了好多天的某个下午突然心血来潮想把图片的链接更换一下，满心热血的将每一个图片重新上传到了Github的仓库。</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204261410285.png" alt="2SSANR0JLMVTYF13F27CDA" loading="lazy"></p><p>点了好久好久，终于在提交代码的时候，所有的页面全都炸了。与此同时，我加了GitHub Action同步到的Gitee page也炸了…</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204261410889.png" alt="1" loading="lazy"></p><p>我尝试了很多方法去挽救，最终无果，最后带着我的page删库跑路了…</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204261412408.png" alt="kasdfl" loading="lazy"></p><p>然后下面的文章就诞生了~~</p></blockquote><p><em><span id="more"></span></em></p><h2 id="博客的选择"><a href="#博客的选择" class="headerlink" title="博客的选择"></a>博客的选择</h2><blockquote class="info">    我目前使用的 hexo + 服务器 + Github保存代码（服务器到期了还有个Github page兜底）</blockquote><p>先来看看一些区别</p><table><thead><tr><th align="center">供应商</th><th align="center">域名绑定</th><th align="center">仓库</th><th align="center">访问速度</th></tr></thead><tbody><tr><td align="center">Gitee page</td><td align="center">不支持（加钱）</td><td align="center">可以私有</td><td align="center">快</td></tr><tr><td align="center">GIthub page</td><td align="center">支持</td><td align="center">只能公开</td><td align="center">魔法快</td></tr><tr><td align="center">服务器（阿里、腾讯…）</td><td align="center">支持</td><td align="center">私有</td><td align="center">快</td></tr></tbody></table><blockquote><p>选择 Github 就是因为他能绑定一个域名….</p></blockquote><h2 id="Hexo搭建博客"><a href="#Hexo搭建博客" class="headerlink" title="Hexo搭建博客"></a>Hexo搭建博客</h2><blockquote><p>这个地方默认你已经拥有了<a href="https://nodejs.org/zh-cn/">Nodejs</a>环境，安装Git环境 <a href="https://git-scm.com/">Git</a> （如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html">这里</a>），已经一个以自己名字命名的 <a href="www.github.com">Github</a>仓库</p></blockquote><p>算了这一步省略了，请参考这篇文章<a href="https://www.yunyoujun.cn/share/how-to-build-your-site/">教你如何从零开始搭建一个属于自己的网站</a></p><h2 id="服务器博客部署"><a href="#服务器博客部署" class="headerlink" title="服务器博客部署"></a>服务器博客部署</h2><blockquote><p>到目前为止，你应该是有了一个可以访问的GitHub page才对…</p><p>并且你的服务器安装了<a href="https://www.bt.cn/new/index.html">宝塔</a></p></blockquote><p>在宝塔面板添加自己的站点</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204261438156.png" alt="image-20220426143759402" loading="lazy"></p><p>添加站点</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204261439249.png" alt="image-20220426143931208" loading="lazy"></p><p>然后将你的<code>hexo g</code> 生成的静态文件方法文件目录下即可得到一个网站。</p><h2 id="同步提交到Github以及服务器"><a href="#同步提交到Github以及服务器" class="headerlink" title="同步提交到Github以及服务器"></a>同步提交到Github以及服务器</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><blockquote><p>在远程服务器上配置好 Git 仓库后，才能将本地的 hexo push 到远端。</p></blockquote><ol><li><p>安装 git <strong>（远程服务器上）</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> <span class="token function">git</span></code></pre></li><li><p>配置 git 用户</p><pre class="language-shell" data-language="shell"><code class="language-shell">adduser <span class="token function">git</span></code></pre></li><li><p>赋予用户权限</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers<span class="token function">vi</span> /etc/sudoers</code></pre></li><li><p>输入 i 进入 insert 模式 ，找到 root ALL&#x3D;(ALL) ALL ，在其下方加入一行 git ALL&#x3D;(ALL) ALL</p><pre class="language-shell" data-language="shell"><code class="language-shell">root    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       ALL// 在这里加入代码<span class="token function">git</span>     <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       ALL</code></pre></li><li><p>按下 ESC ，输入 <code>:wq</code> ，保存 vim 文件。</p></li><li><p>修改 sudoers 文件权限</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> <span class="token number">400</span> /etc/sudoers </code></pre></li><li><p>设置 git 用户的密码</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token function">git</span></code></pre></li><li><p>给 git 用户添加 ssh 秘钥 （找到<strong>本地</strong>的 ssh 公钥，部署 hexo 到 GitHub 时有生成，以 .pub 结尾）</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204261445095.png" alt="image-20220426144517908" loading="lazy"></p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">su</span> - <span class="token function">git</span><span class="token function">mkdir</span> -p ~/.ssh<span class="token function">touch</span> ~/.ssh/authorized_keys<span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorzied_keys<span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh<span class="token function">vim</span> ~/.ssh/authorized_keys    <span class="token comment">#将ssh密钥粘贴进去</span></code></pre><p>如果你有多个密钥（也就是你有多台电脑），在编辑上面的文件的时候，<strong>多个密钥之间要空一行</strong>.</p></li><li><p>在本地打开一个终端，以 ssh 的方式登录云服务器</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">ssh</span> -v git@你的 <span class="token function">ip</span> 地址// 输入密码 即可成功登录云服务器</code></pre></li><li><p>创建一个 git 仓库，新建一个 post-receive 文件，用来存储本地的提交。</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">su</span> root<span class="token builtin class-name">cd</span> /home/git  <span class="token comment"># 远程仓库作为git的目录，可以更改</span><span class="token function">git</span> init --bare blog.git  <span class="token comment">#在/home/git下创建新仓库blog.git</span><span class="token function">chown</span> git:git -R blog.git <span class="token comment">#给予git用户权限</span></code></pre></li><li><p>在 blog.git&#x2F;hooks 文件夹下创建一个 post-receive 钩子，<b style="color: #FF0000">把提交到 git 仓库的文件同步到你的服务器放置静态文件的文件夹中</b></p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> blog.git/hooks<span class="token function">vim</span> post-receive</code></pre></li><li><p>在 post-receive 文件中输入以下代码</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/sh</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/www/wwwroot/xxxx --git-dir<span class="token operator">=</span>/home/git/blog.git checkout -f</code></pre><p><strong>注意：<code>--work-tree </code>是你放博客文件的地方，也就是在服务器部署博客的时候所选的目录</strong>。</p><p><strong><code>--work-tree</code>是第十步创建的git目录</strong></p></li><li><p>授予 post-receive 文件可执行权限</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> +x /home/git/blog.git/hooks/post-receive</code></pre></li></ol><p>服务器端完成🙌🙌</p><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><p>打开 hexo 的配置文件 _config.yml 修改 Deployment 位置的配置</p><pre class="language-yml" data-language="yml"><code class="language-yml">deploy:  type: git  repo:        # 提交到GitHub        github: github仓库地址,master        # 提交到服务器        hexo: root@你的ip地址:&#x2F;home&#x2F;git&#x2F;blog.git,master  # branch: master # 默认使用 master 分支  message: Update Hexo Static Content # 你可以自定义此次部署更新的说明</code></pre><p>配置完成之后，再通过hexo进行提交的时候你就会在GitHub以及你的服务器都收到代码的更新</p><p>至此客户端完成💖💖</p><p><strong>附送一个sh提交命令</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">hexo cleanhexo ghexo d<span class="token function">sleep</span> <span class="token number">1.5</span><span class="token assign-left variable">info</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token string">"<span class="token variable">$info</span>"</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token assign-left variable">info</span><span class="token operator">=</span><span class="token string">":pencil: update content"</span><span class="token keyword">fi</span><span class="token function">git</span> pull<span class="token function">git</span> <span class="token function">add</span> -A<span class="token function">git</span> commit -m <span class="token string">"<span class="token variable">$info</span>"</span><span class="token function">git</span> push</code></pre><p>在博客的根目录创建<code>hexo.sh</code>，将上述代码粘进去，输入<code>sh hexo.sh</code>执行提交命令.</p><h2 id="Github图床"><a href="#Github图床" class="headerlink" title="Github图床"></a>Github图床</h2><p>不写了，看这个 <a href="https://blog.csdn.net/weixin_45965432/article/details/108911937">Typora+PicGo设置GitHub图床</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近随着gitee图床加了防盗链，我的Github page 上面的博客图片全部失效….&lt;/p&gt;
&lt;p&gt;过了好多天的某个下午突然心血来潮想把图片的链接更换一下，满心热血的将每一个图片重新上传到了Github的仓库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204261410285.png&quot; alt=&quot;2SSANR0JLMVTYF13F27CDA&quot;&gt;&lt;/p&gt;
&lt;p&gt;点了好久好久，终于在提交代码的时候，所有的页面全都炸了。与此同时，我加了GitHub Action同步到的Gitee page也炸了…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204261410889.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;我尝试了很多方法去挽救，最终无果，最后带着我的page删库跑路了…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204261412408.png&quot; alt=&quot;kasdfl&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后下面的文章就诞生了~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;</summary>
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Hexo" scheme="https://qianchenjun.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://qianchenjun.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="服务器" scheme="https://qianchenjun.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis的简单使用</title>
    <link href="https://qianchenjun.github.io/posts/803e529f/"/>
    <id>https://qianchenjun.github.io/posts/803e529f/</id>
    <published>2022-03-23T06:59:31.000Z</published>
    <updated>2023-08-16T03:36:50.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis简单学习"><a href="#Mybatis简单学习" class="headerlink" title="Mybatis简单学习"></a>Mybatis简单学习</h1><h2 id="1-两个模板"><a href="#1-两个模板" class="headerlink" title="1. 两个模板"></a>1. 两个模板</h2><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241813558.png" alt="image-20220319113209874" loading="lazy"></p><h3 id="mybatis-config"><a href="#mybatis-config" class="headerlink" title="mybatis-config"></a>mybatis-config</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="mybatis-mapper"><a href="#mybatis-mapper" class="headerlink" title="mybatis-mapper"></a>mybatis-mapper</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="2-核心配置文件详解"><a href="#2-核心配置文件详解" class="headerlink" title="2. 核心配置文件详解"></a>2. 核心配置文件详解</h2><p>核心配置文件中的标签必须按照固定的顺序：</p><pre class="language-xml" data-language="xml"><code class="language-xml">properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//MyBatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://MyBatis.org/dtd/MyBatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--将表中字段的下划线自动转换为驼峰--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--开启延迟加载--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--        typeAlias：设置某个具体的类型的别名        属性：        type：需要设置别名的类型的全类名        alias：设置此类型的别名，若不设置此属性，该类型拥有默认的别名，即类名且不区分大小        写        若设置此属性，此时该类型的别名只能使用alias所设置的值        --></span>        <span class="token comment">&lt;!--&lt;typeAlias type="com.atguigu.mybatis.bean.User">&lt;/typeAlias>--></span>        <span class="token comment">&lt;!--&lt;typeAlias type="com.atguigu.mybatis.bean.User" alias="abc">        &lt;/typeAlias>--></span>        <span class="token comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    environments：设置多个连接数据库的环境    属性：    default：设置默认使用的环境的id    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--        environment：设置具体的连接数据库的环境信息        属性：        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，        表示默认使用的环境        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--            transactionManager：设置事务管理方式            属性：            type：设置事务管理方式，type="JDBC|MANAGED"            type="JDBC"：设置当前环境的事务管理都必须手动处理            type="MANAGED"：设置事务被管理，例如spring中的AOP            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--            dataSource：设置数据源            属性：            type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI"            type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从            缓存中直接获取，不需要重新创建            type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建            type="JNDI"：调用上下文中的数据源            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--设置驱动类的全类名--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment">&lt;!--设置连接数据库的连接地址--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment">&lt;!--设置连接数据库的用户名--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment">&lt;!--设置连接数据库的密码--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入映射文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--        以包为单位，将包下所有的映射文件引入核心配置文件        注意：此方式必须保证mapper接口和mapper映射文件必须在相同的包下        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="3-MyBatis获取参数值的两种方式（重点）"><a href="#3-MyBatis获取参数值的两种方式（重点）" class="headerlink" title="3. MyBatis获取参数值的两种方式（重点）"></a>3. MyBatis获取参数值的两种方式（重点）</h2><p>MyBatis获取参数值的两种方式：<code>$&#123;&#125;和#&#123;&#125;</code></p><p><b style="color: #FF0000">${}的本质就是字符串拼接，#{}的本质就是占位符赋值</b></p><ol><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引<br>号；</li><li>但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自<br>动添加单引号</li></ol><h2 id="4-特殊SQL的执行"><a href="#4-特殊SQL的执行" class="headerlink" title="4. 特殊SQL的执行"></a>4. 特殊SQL的执行</h2><h3 id="4-1-模糊查询"><a href="#4-1-模糊查询" class="headerlink" title="4.1 模糊查询"></a>4.1 模糊查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 测试模糊查询* @param mohu* @return*/</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">testMohu</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"mohu"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> mohu<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;User> testMohu(@Param("mohu") String mohu);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testMohu<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--select * from t_user where username like '%$&#123;mohu&#125;%'--></span>    <span class="token comment">&lt;!--select * from t_user where username like concat('%',#&#123;mohu&#125;,'%')--></span>    select * from t_user where username like "%"#&#123;mohu&#125;"%"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="4-2-批量删除"><a href="#4-2-批量删除" class="headerlink" title="4.2 批量删除"></a>4.2 批量删除</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 批量删除* @param ids* @return*/</span><span class="token keyword">int</span> <span class="token function">deleteMore</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int deleteMore(@Param("ids") String ids);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteMore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from t_user where id in ($&#123;ids&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><h3 id="4-3-动态设置表名"><a href="#4-3-动态设置表名" class="headerlink" title="4.3 动态设置表名"></a>4.3 动态设置表名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 动态设置表名，查询所有的用户信息* @param tableName* @return*/</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tableName"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> tableName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;User> getAllUser(@Param("tableName") String tableName);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from $&#123;tableName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="4-4-添加功能获取自增的主键"><a href="#4-4-添加功能获取自增的主键" class="headerlink" title="4.4 添加功能获取自增的主键"></a>4.4 添加功能获取自增的主键</h3><p>t_clazz(clazz_id,clazz_name)<br>t_student(student_id,student_name,clazz_id)</p><ol><li>添加班级信息</li><li>获取新添加的班级的id</li><li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 添加用户信息* @param user* @return* useGeneratedKeys：设置使用自增的主键* keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中*/</span><span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int insertUser(User user);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><h2 id="5-自定义映射resultMap"><a href="#5-自定义映射resultMap" class="headerlink" title="5. 自定义映射resultMap"></a>5. 自定义映射resultMap</h2><h3 id="5-1-resultMap处理字段和属性的映射关系"><a href="#5-1-resultMap处理字段和属性的映射关系" class="headerlink" title="5.1 resultMap处理字段和属性的映射关系"></a>5.1 resultMap处理字段和属性的映射关系</h3><blockquote><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    resultMap：设置自定义映射    属性：    id：表示自定义映射的唯一标识    type：查询的数据要映射的实体类的类型    子标签：    id：设置主键的映射关系    result：设置普通字段的映射关系    association：设置多对一的映射关系    collection：设置一对多的映射关系    属性：    property：设置映射关系中实体类中的属性名    column：设置映射关系中表中的字段名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--List&lt;User> testMohu(@Param("mohu") String mohu);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testMohu<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--select * from t_user where username like '%$&#123;mohu&#125;%'--></span>    select id,user_name,password,age,sex from t_user where user_name likeconcat('%',#&#123;mohu&#125;,'%')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><blockquote><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性<br>名符合Java的规则（使用驼峰）<br>此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系<br>a&gt;可以通过为字段起别名的方式，保证和实体类中的属性名保持一致<br>b&gt;可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可<br>以在查询表中数据时，自动将_类型的字段名转换为驼峰<br>例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为<br>userName</p></blockquote><h3 id="5-2-多对一映射处理"><a href="#5-2-多对一映射处理" class="headerlink" title="5.2 多对一映射处理"></a>5.2 多对一映射处理</h3><blockquote><p>查询员工信息以及员工所对应的部门信息</p></blockquote><h4 id="5-2-1-级联方式处理映射关系"><a href="#5-2-1-级联方式处理映射关系" class="headerlink" title="5.2.1 级联方式处理映射关系"></a>5.2.1 级联方式处理映射关系</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empDeptMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept.did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept.dname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Emp getEmpAndDeptByEid(@Param("eid") int eid);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpAndDeptByEid<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empDeptMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did = dept.did where emp.eid = #&#123;eid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="5-2-2-使用association处理映射关系"><a href="#5-2-2-使用association处理映射关系" class="headerlink" title="5.2.2 使用association处理映射关系"></a>5.2.2 使用association处理映射关系</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empDeptMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Emp getEmpAndDeptByEid(@Param("eid") int eid);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpAndDeptByEid<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empDeptMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did = dept.did where emp.eid = #&#123;eid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="5-2-3-分步查询"><a href="#5-2-3-分步查询" class="headerlink" title="5.2.3 分步查询"></a>5.2.3 分步查询</h4><ol><li><p>查询员工信息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 通过分步查询查询员工信息* @param eid* @return*/</span><span class="token class-name">Emp</span> <span class="token function">getEmpByStep</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"eid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> eid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empDeptStepMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        select：设置分步查询，查询某个属性的值的sql的标识（namespace.sqlId）        column：将sql以及查询结果中的某个字段设置为分步查询的条件    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span>    <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.MyBatis.mapper.DeptMapper.getEmpDeptByStep<span class="token punctuation">"</span></span>         <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Emp getEmpByStep(@Param("eid") int eid);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpByStep<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empDeptStepMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp where eid = #&#123;eid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>根据员工所对应的部门id查询部门信息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 分步查询的第二步：根据员工所对应的did查询部门信息* @param did* @return*/</span><span class="token class-name">Dept</span> <span class="token function">getEmpDeptByStep</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Dept getEmpDeptByStep(@Param("did") int did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpDeptByStep<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_dept where did = #&#123;did&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="5-3-一对多映射处理"><a href="#5-3-一对多映射处理" class="headerlink" title="5.3 一对多映射处理"></a>5.3 一对多映射处理</h3><h4 id="5-3-1-collection"><a href="#5-3-1-collection" class="headerlink" title="5.3.1 collection"></a>5.3.1 collection</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据部门id查新部门以及部门中的员工信息* @param did* @return*/</span><span class="token class-name">Dept</span> <span class="token function">getDeptEmpByDid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptEmpMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    ofType：设置collection标签所处理的集合属性中存储数据的类型    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Dept getDeptEmpByDid(@Param("did") int did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getDeptEmpByDid<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptEmpMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select dept.*,emp.* from t_dept dept left join t_emp emp on dept.did = emp.did where dept.did = #&#123;did&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="5-3-2-分步查询"><a href="#5-3-2-分步查询" class="headerlink" title="5.3.2 分步查询"></a>5.3.2 分步查询</h4><ol><li><p>查询部门信息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 分步查询部门和部门中的员工* @param did* @return*/</span><span class="token class-name">Dept</span> <span class="token function">getDeptByStep</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptEmpStep<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">fetchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eager<span class="token punctuation">"</span></span><span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.MyBatis.mapper.EmpMapper.getEmpListByDid<span class="token punctuation">"</span></span>         <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Dept getDeptByStep(@Param("did") int did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getDeptByStep<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptEmpStep<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_dept where did = #&#123;did&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>根据部门id查询部门中的所有员工</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据部门id查询员工信息* @param did* @return*/</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> <span class="token function">getEmpListByDid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;Emp> getEmpListByDid(@Param("did") int did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpListByDid<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp where did = #&#123;did&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ol><blockquote><p>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：<br><code>lazyLoadingEnabled</code>：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载<br><code>aggressiveLazyLoading</code>：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载<br>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和<br>collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType&#x3D;”lazy(延迟加<br>载)|eager(立即加载)”</p></blockquote><h2 id="6-动态sql"><a href="#6-动态sql" class="headerlink" title="6. 动态sql"></a>6. 动态sql</h2><h3 id="6-1-if"><a href="#6-1-if" class="headerlink" title="6.1 if"></a>6.1 if</h3><blockquote><p>if标签可通过test属性的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；</p><p>反之标签中的内容不会执行</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;Emp> getEmpListByMoreTJ(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpListByMoreTJ<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename != <span class="token punctuation">'</span><span class="token punctuation">'</span> and ename != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and ename = #&#123;ename&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != <span class="token punctuation">'</span><span class="token punctuation">'</span> and age != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and age = #&#123;age&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != <span class="token punctuation">'</span><span class="token punctuation">'</span> and sex != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and sex = #&#123;sex&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="6-2-where"><a href="#6-2-where" class="headerlink" title="6.2 where"></a>6.2 where</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpListByMoreTJ2<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename != <span class="token punctuation">'</span><span class="token punctuation">'</span> and ename != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ename = #&#123;ename&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != <span class="token punctuation">'</span><span class="token punctuation">'</span> and age != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and age = #&#123;age&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != <span class="token punctuation">'</span><span class="token punctuation">'</span> and sex != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and sex = #&#123;sex&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><blockquote><p>where和if一般结合使用：</p><ol><li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字</li><li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的<br>and去掉</li></ol><p><b style="color: #FF0000"> 注意：where标签不能去掉条件最后多余的and </b></p></blockquote><h3 id="6-3-trim"><a href="#6-3-trim" class="headerlink" title="6.3 trim"></a>6.3 trim</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpListByMoreTJ<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename != <span class="token punctuation">'</span><span class="token punctuation">'</span> and ename != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ename = #&#123;ename&#125; and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != <span class="token punctuation">'</span><span class="token punctuation">'</span> and age != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        age = #&#123;age&#125; and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != <span class="token punctuation">'</span><span class="token punctuation">'</span> and sex != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        sex = #&#123;sex&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><blockquote><p>trim用于去掉或添加标签中的内容<br>常用属性：</p><ul><li><code>prefix</code>：在trim标签中的内容的前面添加某些内容</li><li><code>prefixOverrides</code>：在trim标签中的内容的前面去掉某些内容</li><li><code>suffix</code>：在trim标签中的内容的后面添加某些内容</li><li><code>suffixOverrides</code>：在trim标签中的内容的后面去掉某些内容</li></ul></blockquote><h3 id="6-4-choose、when、otherwise"><a href="#6-4-choose、when、otherwise" class="headerlink" title="6.4 choose、when、otherwise"></a>6.4 choose、when、otherwise</h3><blockquote><p>choose、when、otherwise相当于if…else if..else</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;Emp> getEmpListByChoose(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpListByChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from t_emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename != <span class="token punctuation">'</span><span class="token punctuation">'</span> and ename != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            ename = #&#123;ename&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != <span class="token punctuation">'</span><span class="token punctuation">'</span> and age != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            age = #&#123;age&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != <span class="token punctuation">'</span><span class="token punctuation">'</span> and sex != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            sex = #&#123;sex&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email != <span class="token punctuation">'</span><span class="token punctuation">'</span> and email != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            email = #&#123;email&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="6-5-foreach"><a href="#6-5-foreach" class="headerlink" title="6.5 foreach"></a>6.5 foreach</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int insertMoreEmp(List&lt;Emp> emps);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertMoreEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>insert into t_emp values    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    (null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--int deleteMoreByArray(int[] eids);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteMoreByArray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from t_emp where    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    eid = #&#123;eid&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--int deleteMoreByArray(int[] eids);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteMoreByArray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from t_emp where eid in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    #&#123;eid&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><blockquote><p>属性：</p><ol><li><code>collection</code>：设置要循环的数组或集合</li><li><code>item</code>：表示集合或数组中的每一个数据</li><li><code>separator</code>：设置循环体之间的分隔符</li><li><code>open</code>：设置foreach标签中的内容的开始符</li><li><code>close</code>：设置foreach标签中的内容的结束符</li></ol></blockquote><h3 id="6-6-SQL片段"><a href="#6-6-SQL片段" class="headerlink" title="6.6 SQL片段"></a>6.6 SQL片段</h3><blockquote><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>eid,ename,age,sex,did<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from t_emp</code></pre><h2 id="7-MyBatis的缓存"><a href="#7-MyBatis的缓存" class="headerlink" title="7. MyBatis的缓存"></a>7. MyBatis的缓存</h2><h3 id="7-1-MyBatis的一级缓存"><a href="#7-1-MyBatis的一级缓存" class="headerlink" title="7.1 MyBatis的一级缓存"></a>7.1 MyBatis的一级缓存</h3><blockquote><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问。</p></blockquote><p>使一级缓存失效的四种情况：</p><ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol><h3 id="7-2-MyBatis的二级缓存"><a href="#7-2-MyBatis的二级缓存" class="headerlink" title="7.2 MyBatis的二级缓存"></a>7.2 MyBatis的二级缓存</h3><blockquote><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被<br>缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取。</p></blockquote><p>二级缓存开启的条件：</p><ol><li>在核心配置文件中，设置全局配置属性<code>cacheEnabled=&quot;true&quot;</code>，默认为true，不需要设置</li><li>在映射文件中设置标签<code>&lt;cache /&gt;</code></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol><p><b style="color: #FF0000"> 使二级缓存失效的情况： 两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效 </b></p><h3 id="7-3-二级缓存的相关配置"><a href="#7-3-二级缓存的相关配置" class="headerlink" title="7.3 二级缓存的相关配置"></a>7.3 二级缓存的相关配置</h3><p>在mapper配置文件中添加的cache标签可以设置一些属性：</p><ul><li>eviction属性：缓存回收策略<br>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。<br>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。<br>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。<br>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。<br>默认的是 LRU。</li><li>flushInterval属性：刷新间隔，单位毫秒<br>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新<br>size属性：引用数目，正整数<br>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li><li>readOnly属性：只读，true&#x2F;false<br>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了<br>很重要的性能优势。<br>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是<br>false。</li></ul><h3 id="7-4-MyBatis缓存查询的顺序"><a href="#7-4-MyBatis缓存查询的顺序" class="headerlink" title="7.4 MyBatis缓存查询的顺序"></a>7.4 MyBatis缓存查询的顺序</h3><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</li><li>如果二级缓存没有命中，再查询一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><h2 id="8-MyBatis的逆向工程"><a href="#8-MyBatis的逆向工程" class="headerlink" title="8. MyBatis的逆向工程"></a>8. MyBatis的逆向工程</h2><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程<br>的。</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：<ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper映射文件</li></ul></li></ul><h3 id="8-1-创建逆向工程"><a href="#8-1-创建逆向工程" class="headerlink" title="8.1 创建逆向工程"></a>8.1 创建逆向工程</h3><h4 id="8-1-1-添加依赖和插件"><a href="#8-1-1-添加依赖和插件" class="headerlink" title="8.1.1 添加依赖和插件"></a>8.1.1 添加依赖和插件</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 依赖MyBatis核心包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 控制Maven在构建过程中相关配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 构建过程中用到的插件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 插件的依赖 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 逆向工程的核心依赖 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 数据库连接池 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- MySQL驱动 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h4 id="8-1-2-创建MyBatis的核心配置文件"><a href="#8-1-2-创建MyBatis的核心配置文件" class="headerlink" title="8.1.2 创建MyBatis的核心配置文件"></a>8.1.2 创建MyBatis的核心配置文件</h4><blockquote><p>使用模板创建mybatis-config 即可</p></blockquote><h4 id="8-1-3-创建逆向工程的配置文件"><a href="#8-1-3-创建逆向工程的配置文件" class="headerlink" title="8.1.3 创建逆向工程的配置文件"></a>8.1.3 创建逆向工程的配置文件</h4><blockquote><p>文件名必须是：generatorConfig.xml</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span>    <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>    <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        targetRuntime: 执行生成的逆向工程的版本        MyBatis3Simple: 生成基本的CRUD（清新简洁版）        MyBatis3: 生成带条件的CRUD（奢华尊享版）    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB2Tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3Simple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 数据库的连接信息 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>            <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC<span class="token punctuation">"</span></span>            <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>            <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>333<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- javaBean的生成策略--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean<span class="token punctuation">"</span></span>        <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- SQL映射文件的生成策略 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span>        <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\resources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Mapper接口的生成策略 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span>        <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 逆向分析的表 --></span>        <span class="token comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --></span>        <span class="token comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_emp<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_dept<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span></code></pre><h4 id="8-1-4-执行MBG插件的generate目标"><a href="#8-1-4-执行MBG插件的generate目标" class="headerlink" title="8.1.4 执行MBG插件的generate目标"></a>8.1.4 执行MBG插件的generate目标</h4><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204262024590.png" alt="202204261939748" loading="lazy"></p><p>效果：</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204262024804.png" alt="202204261939490" loading="lazy"></p><h3 id="8-2-QBC查询"><a href="#8-2-QBC查询" class="headerlink" title="8.2 QBC查询"></a>8.2 QBC查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token keyword">new</span>    <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EmpExample</span> empExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</span>   empExample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andEnameLike</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andAgeGreaterThan</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andDidIsNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将之前添加的条件通过or拼接其他条件</span>    empExample<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andSexEqualTo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>empExample<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Emp</span> emp <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="9-分页插件"><a href="#9-分页插件" class="headerlink" title="9. 分页插件"></a>9. 分页插件</h2><h3 id="9-1-分页插件的使用"><a href="#9-1-分页插件的使用" class="headerlink" title="9.1 分页插件的使用"></a>9.1 分页插件的使用</h3><h4 id="9-1-1-配置分页插件"><a href="#9-1-1-配置分页插件" class="headerlink" title="9.1.1 配置分页插件"></a>9.1.1 配置分页插件</h4><blockquote><p>添加分页插件的依赖</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="9-1-2-配置分页插件"><a href="#9-1-2-配置分页插件" class="headerlink" title="9.1.2 配置分页插件"></a>9.1.2 配置分页插件</h4><p>在MyBatis的核心配置文件中配置插件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--设置分页插件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><h3 id="9-2-分页插件的使用"><a href="#9-2-分页插件的使用" class="headerlink" title="9.2 分页插件的使用"></a>9.2 分页插件的使用</h3><h4 id="9-2-1-开启分页"><a href="#9-2-1-开启分页" class="headerlink" title="9.2.1 开启分页"></a>9.2.1 开启分页</h4><blockquote><p>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能</p><ol><li>pageNum：当前页的页码</li><li>pageSize：每页显示条数</li></ol></blockquote><h4 id="9-2-2-获取list集合后的操作"><a href="#9-2-2-获取list集合后的操作" class="headerlink" title="9.2.2 获取list集合后的操作"></a>9.2.2 获取list集合后的操作</h4><blockquote><p>使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据</p></blockquote><p>相关数据：</p><table><thead><tr><th align="center">属性</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">pageNum</td><td align="center">当前页的页码</td></tr><tr><td align="center">pageSize</td><td align="center">每页显示的条数</td></tr><tr><td align="center">size</td><td align="center">当前页显示的真实条数</td></tr><tr><td align="center">total</td><td align="center">总记录数</td></tr><tr><td align="center">pages</td><td align="center">总页数</td></tr><tr><td align="center">prePage</td><td align="center">上一页的页码</td></tr><tr><td align="center">nextPage</td><td align="center">下一页的页码</td></tr><tr><td align="center">isFirstPage&#x2F;isLastPage</td><td align="center">是否为第一页&#x2F;最后一页</td></tr><tr><td align="center">hasPreviousPage&#x2F;haxNextPage</td><td align="center">是否存在上一页&#x2F;下一页</td></tr><tr><td align="center">navigatePages</td><td align="center">导航分页的页码数</td></tr><tr><td align="center">navigatepageNums</td><td align="center">导航分页的页码, [1, 2,3,4,5]</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis简单学习&quot;&gt;&lt;a href=&quot;#Mybatis简单学习&quot; class=&quot;headerlink&quot; title=&quot;Mybatis简单学习&quot;&gt;&lt;/a&gt;Mybatis简单学习&lt;/h1&gt;&lt;h2 id=&quot;1-两个模板&quot;&gt;&lt;a href=&quot;#1-两个模板&quot; cla</summary>
      
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Mybatis" scheme="https://qianchenjun.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>使用不蒜子出现的问题</title>
    <link href="https://qianchenjun.github.io/posts/aa536622/"/>
    <id>https://qianchenjun.github.io/posts/aa536622/</id>
    <published>2022-02-09T11:42:30.000Z</published>
    <updated>2023-08-16T03:36:50.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不蒜子和live2d同时使用出现的问题"><a href="#不蒜子和live2d同时使用出现的问题" class="headerlink" title="不蒜子和live2d同时使用出现的问题"></a>不蒜子和live2d同时使用出现的问题</h2><blockquote><p>当二者同时使用的时候，不蒜子的统计会莫名其妙的添加上display：none的属性</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241800794.png" alt="image-20220209194543209" loading="lazy"></p><p>这是个好久之前的bug，目前仍没有好的解决方案。</p></blockquote><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>我的资源目录：<code>\themes\yun\source\js\others\busuanzi.pure.mini.js</code></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241800856.png" alt="image-20220209194936778" loading="lazy"></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> bszCaller<span class="token punctuation">,</span>bszTag<span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function-variable function">ready</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">||</span><span class="token string">"interactive"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">||</span><span class="token string">"complete"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">?</span><span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token operator">:</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">d</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>c<span class="token operator">></span>a<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">e</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">d</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>removeEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>addEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">loaded|complete</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>a<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">doScroll</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszCaller<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function-variable function">fetch</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token string">"BusuanziCallback_"</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1099511627776</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalCall</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"SCRIPT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>defer<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>src<span class="token operator">=</span>a<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">evalCall</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>bszCaller<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bszTag<span class="token punctuation">.</span><span class="token function">texts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token punctuation">.</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">bszs</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"site_pv"</span><span class="token punctuation">,</span><span class="token string">"page_pv"</span><span class="token punctuation">,</span><span class="token string">"site_uv"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">texts</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> c<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_value_"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">hides</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">shows</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"inline"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>如上操作其实就是把其中的<code>b.style.display=&quot;none&quot;</code>中<code>none</code>去掉。</p><p>然后找到自己的不蒜子<code>js</code>文件引用路径将其改为新的目标地址即可。</p><p>参考链接：<a href="https://blog.csdn.net/weixin_37891983/article/details/105362748">https://blog.csdn.net/weixin_37891983/article/details/105362748</a>)</p><h2 id="使用不蒜子出现502问题"><a href="#使用不蒜子出现502问题" class="headerlink" title="使用不蒜子出现502问题"></a>使用不蒜子出现502问题</h2><blockquote><p>这个问题的出现个人认为是频繁的刷新导致的。</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>浏览器访问该不蒜子的官网：<a href="https://busuanzi.ibruce.info/">不蒜子</a></p><p>禁用cookies使用权限即可</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241801553.png" alt="image-20220209195446756" loading="lazy"></p><p>参考链接：<a href="https://blog.csdn.net/fanqiliang630/article/details/117302625">https://blog.csdn.net/fanqiliang630/article/details/117302625</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;不蒜子和live2d同时使用出现的问题&quot;&gt;&lt;a href=&quot;#不蒜子和live2d同时使用出现的问题&quot; class=&quot;headerlink&quot; title=&quot;不蒜子和live2d同时使用出现的问题&quot;&gt;&lt;/a&gt;不蒜子和live2d同时使用出现的问题&lt;/h2&gt;&lt;bloc</summary>
      
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    <category term="转载" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="hexo" scheme="https://qianchenjun.github.io/tags/hexo/"/>
    
    <category term="不蒜子" scheme="https://qianchenjun.github.io/tags/%E4%B8%8D%E8%92%9C%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot开发</title>
    <link href="https://qianchenjun.github.io/posts/d3394559/"/>
    <id>https://qianchenjun.github.io/posts/d3394559/</id>
    <published>2022-02-03T10:57:03.000Z</published>
    <updated>2023-08-16T03:36:50.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h2><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><blockquote><p><code>@ConfigurationProperties</code>可以为第三方<code>bean</code>绑定属性。</p><p>也就是将yaml文件里面的数据封装到实体类里面。</p></blockquote><blockquote class="success">    @EnableConfigurationProperties注解可以将使用@ConfigurationProperties注解对应的类加入Spring容器，也就是代替了@Component。</blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">ServerConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBoot11ConfigurationApplication</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"servers"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ipAddress<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><b style="color: #FF0000">注意: @EnableConfigurationProperties和@Component不能同时使用</b></p><p>配置文件：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">servers</span><span class="token punctuation">:</span>  <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> 192.168.0.2  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">20</span></code></pre><br><h3 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h3><blockquote><p>中划线模式（烤肉串模式）是被推荐的。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808469.png" alt="image-20220210190440747" loading="lazy"><em>宽松绑定</em></p><p><b style="color: #FF0000">注意：宽松绑定不支持注解<code>@Value</code>引用单个属性的方式。</b></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"datesource"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">datasource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">DruidDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ds<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><b style="color: #FF0000">注意：绑定前缀名命名规范：仅能使用纯小写字母、数字、下划线作为合法的字符。</b></p><br><h3 id="常用计量单位"><a href="#常用计量单位" class="headerlink" title="常用计量单位"></a>常用计量单位</h3><blockquote><p><code>SpringBoot</code>支持<code>JDBK8</code>提供的时间与空间计量单位</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"servers"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ipAddress<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DurationUnit</span><span class="token punctuation">(</span><span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span> <span class="token comment">// 小时</span>    <span class="token keyword">private</span> <span class="token class-name">Duration</span> serverTimeOut<span class="token punctuation">;</span>    <span class="token comment">// @DataSizeUnit(DataUnit.MEGABYTES) // 如果配置文件直接使用了单位，该注解不需要提供</span>    <span class="token keyword">private</span> <span class="token class-name">DataSize</span> dataSize<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">servers</span><span class="token punctuation">:</span>  <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> 192.168.0.1  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">dataSize</span><span class="token punctuation">:</span> 10MB <span class="token comment"># 最后显示的数据是换算成B的数字</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808584.png" alt="image-20220210192445745" loading="lazy"><em>时间与空间计量单位</em></p><br><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><ol><li><p>导入坐标</p><blockquote><p>这两个坐标的关系：JSOR303规范相当于JDBC作为接口，hibernate提供的校验器相当于mysql驱动作为实现类。</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--1.导入JSR303规范--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用hibernate框架提供的校验器做实现类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>开启对Bean的校验功能</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"servers"</span><span class="token punctuation">)</span><span class="token comment">// 2.开启对当前bean的属性注入校验</span><span class="token annotation punctuation">@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>设置校验规则</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"servers"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"端口最大值不能超过8888"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808397.png" alt="image-20220210193440346" loading="lazy"><em>其他校验规则</em></p><br><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="加载测试专用属性"><a href="#加载测试专用属性" class="headerlink" title="加载测试专用属性"></a>加载测试专用属性</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// properties属性可以为当前测试用例添加临时的属性配置</span><span class="token comment">//@SpringBootTest(properties = &#123;"test.prop=testValue1"&#125;)</span><span class="token comment">// args属性可以为当前测试用例添加临时的命令行参数</span><span class="token comment">//@SpringBootTest(args = &#123;"--test.prop=testValue2"&#125;)</span><span class="token comment">// 命令行的优先级高于配置文件和properties</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"--test.prop=testValue2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> properties <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"test.prop=testValue1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesAndArgsTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;test.prop&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><b style="color: #FF0000">优势：比多环境开发中的测试环境影响范围更小，仅对当前测试类有效。</b></p><br><h3 id="加载测试专用配置"><a href="#加载测试专用配置" class="headerlink" title="加载测试专用配置"></a>加载测试专用配置</h3><p>使用<code>@Import</code>注解加载当前测试类专用的配置</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token comment">// 加载测试范围配置应用于小范围测试环境</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">MsgConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"new msg..."</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><h3 id="Web环境模拟测试"><a href="#Web环境模拟测试" class="headerlink" title="Web环境模拟测试"></a>Web环境模拟测试</h3><h4 id="模拟端口"><a href="#模拟端口" class="headerlink" title="模拟端口"></a>模拟端口</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span>RANDOM_PORT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRandomPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808383.png" alt="image-20220210200356642" loading="lazy"><em>端口</em></p><h4 id="虚拟请求测试"><a href="#虚拟请求测试" class="headerlink" title="虚拟请求测试"></a>虚拟请求测试</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">// 开启虚拟的MVC调用</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token comment">// 注入虚拟MVC调用对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWeb</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 完整请求：http://localhost:8080/books</span>        <span class="token comment">// 创建虚拟请求, 当前访问/books</span>        <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行对应的请求</span>        mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getById is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"springboot"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="虚拟请求状态匹配"><a href="#虚拟请求状态匹配" class="headerlink" title="虚拟请求状态匹配"></a>虚拟请求状态匹配</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStatus</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/books123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultActions</span> actions <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设定预期值 与真实值进行比较, 成功则测试通过, 失败则测试失败</span>    <span class="token comment">// 定义本次调用的预期值</span>    <span class="token class-name">StatusResultMatchers</span> status <span class="token operator">=</span> <span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 预计本次调用成功: 状态200</span>    <span class="token class-name">ResultMatcher</span> ok <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加预计值到本次调用过程中进行匹配</span>    actions<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808492.png" alt="image-20220210202148948" loading="lazy"><em>调用失败</em></p><h4 id="虚拟请求体-String-匹配"><a href="#虚拟请求体-String-匹配" class="headerlink" title="虚拟请求体(String)匹配"></a>虚拟请求体(String)匹配</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultActions</span> actions <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 匹配执行结果(是否预期值)</span>    <span class="token comment">// 定义执行结果匹配器</span>    <span class="token class-name">ContentResultMatchers</span> content <span class="token operator">=</span> <span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义预期执行结果</span>    <span class="token class-name">ResultMatcher</span> result <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"springboot123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用本次真实执行结果与预期结果进行比对</span>    actions<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808669.png" alt="image-20220210202508673" loading="lazy"><em>调用失败</em></p><h4 id="虚拟请求体-json-匹配"><a href="#虚拟请求体-json-匹配" class="headerlink" title="虚拟请求体(json)匹配"></a>虚拟请求体(json)匹配</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultActions</span> actions <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 匹配执行结果(是否预期值)</span>    <span class="token comment">// 定义执行结果匹配器</span>    <span class="token class-name">ContentResultMatchers</span> content <span class="token operator">=</span> <span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义预期执行结果</span>    <span class="token class-name">ResultMatcher</span> result <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">"&#123;\"id\":1,\"name\":\"Springboot2\",\"type\":\"Springboot\",\"description\":\"Springboot\"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用本次真实执行结果与预期结果进行比对</span>    actions<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808750.png" alt="image-20220210202858593" loading="lazy"></p><h4 id="虚拟请求头匹配"><a href="#虚拟请求头匹配" class="headerlink" title="虚拟请求头匹配"></a>虚拟请求头匹配</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testContentType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultActions</span> actions <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 匹配执行结果(是否预期值)</span>    <span class="token comment">// 定义执行结果匹配器</span>    <span class="token class-name">HeaderResultMatchers</span> header <span class="token operator">=</span> <span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义预期执行结果</span>    <span class="token class-name">ResultMatcher</span> contentType <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用本次真实执行结果与预期结果进行比对</span>    actions<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808941.png" alt="image-20220210204909110" loading="lazy"></p><blockquote class="yellow">    以上出现的所有测试均可以相互组合,从而形成完整的测试。</blockquote><br><h3 id="数据层测试回滚"><a href="#数据层测试回滚" class="headerlink" title="数据层测试回滚"></a>数据层测试回滚</h3><ul><li>为测试用例添加事务，SpringBoot会对测试用例对应的事务提交操作进行回滚</li><li>如果想在测试用例中提交事务，可以通过<code>@Rollback</code>注解设置</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@Transactional</span>  <span class="token comment">// 事物管理</span><span class="token annotation punctuation">@Rollback</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false阻止事务回滚</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaoTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookService</span> bookService<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br><h3 id="测试用例数据设定"><a href="#测试用例数据设定" class="headerlink" title="测试用例数据设定"></a>测试用例数据设定</h3><blockquote><p>测试用例数据通常采用随机值进行测试，使用SpringBoot提供的随机数为其赋值。</p></blockquote><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">testcase</span><span class="token punctuation">:</span>  <span class="token key atrule">book</span><span class="token punctuation">:</span>    <span class="token key atrule">id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.int<span class="token punctuation">&#125;</span>    <span class="token key atrule">id2</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.int(10)<span class="token punctuation">&#125;</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.int(10<span class="token punctuation">,</span>20)<span class="token punctuation">&#125;</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 胖虎$<span class="token punctuation">&#123;</span>random.value<span class="token punctuation">&#125;</span>    <span class="token key atrule">uuid</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.uuid<span class="token punctuation">&#125;</span>    <span class="token key atrule">publishTime</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.long<span class="token punctuation">&#125;</span></code></pre><ul><li><code>$&#123;random.int&#125;</code>表示随机整数</li><li><code>$&#123;random.int(10)&#125;</code>表示10以内的随机整数</li><li><code>$&#123;random.int(10,20)&#125;</code>表示10到20的随机数</li><li>其中<code>()</code>可以是任意字符，例如<code>[]</code>，<code>!!</code>均可</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"testcase.book"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uuid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> publishTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808575.png" alt="image-20220210211038256" loading="lazy"><em>生成的随机测试用例</em></p><br><h2 id="数据层解决方案"><a href="#数据层解决方案" class="headerlink" title="数据层解决方案"></a>数据层解决方案</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h4><ul><li><p>SpringBoot提供了3种内嵌的数据源对象</p><ul><li><code>HikariCP</code>：默认内置数据源对象</li><li><code>Tomcat</code>提供<code>DataSource</code>：<code>HikariCP</code>不可用的情况下，且在web环境中，将使用<code>tomcat</code>服务器配置的数据源对象</li><li><code>Commons DBCP</code>：<code>Hikari</code>不可用，<code>tomcat</code>数据源也不可用，将使用<code>dbcp</code>数据源</li></ul></li><li><p>通用的配置无法设置具体的数据源配置信息，仅提供基本的连接相关配置，如需配置，在下一级配置中设置具体的设定</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm_db<span class="token punctuation">?</span>serverTimezone=UTC    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">333</span>    <span class="token comment"># 默认使用hikari作为数据源</span>    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>      <span class="token key atrule">maximun-pool-size</span><span class="token punctuation">:</span> <span class="token number">50</span></code></pre></li></ul><h4 id="持久化技术"><a href="#持久化技术" class="headerlink" title="持久化技术"></a>持久化技术</h4><p>内置持久化解决方案—JdbcTemplate</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringBoot13SqlApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTemplateSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from tbl_book"</span><span class="token punctuation">;</span>        <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> rm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                book<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                book<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> book<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>rm<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>book <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>JdbcTemplate配置</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808692.png" alt="image-20220210212758190" loading="lazy"></p><h4 id="内嵌数据库"><a href="#内嵌数据库" class="headerlink" title="内嵌数据库"></a>内嵌数据库</h4><ul><li>SpringBoot提供了3种内嵌数据库<ul><li><code>H2</code></li><li><code>HSQL</code></li><li><code>Derby</code></li></ul></li></ul><p><strong>内嵌数据库（H2）</strong></p><ol><li><p>设置当前项目为web工程，并配置H2管理控制台参数</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">h2</span><span class="token punctuation">:</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /h2</code></pre></li><li><p>访问用户名sa，默认密码123456</p></li><li><p>操作数据库（创建表）</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tbl_book <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token keyword">varchar</span><span class="token punctuation">,</span> description <span class="token keyword">varchar</span><span class="token punctuation">)</span></code></pre></li><li><p>设置访问数据源</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">h2</span><span class="token punctuation">:</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /h2  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment"># url 这一项不能放在hikari下面</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>~/test    <span class="token comment"># 默认使用hikari作为数据源</span>    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.h2.Driver      <span class="token key atrule">username</span><span class="token punctuation">:</span> sa      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span></code></pre></li></ol><h4 id="数据层解决方案-1"><a href="#数据层解决方案-1" class="headerlink" title="数据层解决方案"></a>数据层解决方案</h4><blockquote><p>基于目前所学技术，已经可以做技术选型。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241810797.png" alt="image-20220210214424802" loading="lazy"></p><br><hr><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p>Redis目前使用有一个小的bug，需要先在命令行做如下操作才能连接上。</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808757.png" alt="image-20220211174107439" loading="lazy"></p></blockquote><ol><li><p>服务端启动（<code>redis-server.exe redis.windows.conf</code>）</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808081.png" alt="image-20220211174142268" loading="lazy"><em>服务端启动redis</em></p></li><li><p>客户端启动（<code>redis-cli.exe</code>）</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808148.png" alt="image-20220211174405769" loading="lazy"></p><br></li></ol><h4 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h4><ol><li><p>导入SpringBoot整合Redis坐标</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置Redis（采用默认配置）</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token comment"># 下面的配置为默认配置, 可不写</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost <span class="token comment"># 127.0.0.1</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span></code></pre></li><li><p>操作Redis</p><blockquote class="danger">    使用`RedisTemplate`对象没有办法操作Redis所保存的数据。</blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringBoot14RedisApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 核心</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ValueOperations</span> vo <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ValueOperations</span> vo <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> age <span class="token operator">=</span> vo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashOperations</span> vo <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"testHash"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHashGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashOperations</span> vo <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> vo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"testHash"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808471.png" alt="image-20220211180210531" loading="lazy"><em>常用操作</em></p></li></ol><br><h4 id="SpringBoot读写Redis客户端"><a href="#SpringBoot读写Redis客户端" class="headerlink" title="SpringBoot读写Redis客户端"></a>SpringBoot读写Redis客户端</h4><blockquote><p><code>StringRedisTemplate</code>可以操作客户端数据</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringRedisTemplateTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> vo <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> vo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808336.png" alt="image-20220211180617911" loading="lazy"><em>客户端读取name值</em></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808159.png" alt="image-20220211180947678" loading="lazy"><em>StringRedisTemplate对象读取name值</em></p><br><h4 id="SpringBoot读写Redis客户端（jedis）"><a href="#SpringBoot读写Redis客户端（jedis）" class="headerlink" title="SpringBoot读写Redis客户端（jedis）"></a>SpringBoot读写Redis客户端（jedis）</h4><ol><li><p>导入jedis坐标</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置客户端</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token comment"># 下面的配置为默认配置, 可不写</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost <span class="token comment"># 127.0.0.1</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">client-type</span><span class="token punctuation">:</span> lettuce    <span class="token comment"># 配置专用属性</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">16</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">16</span></code></pre></li></ol><ul><li><code>lettuce</code>与<code>jedis</code>区别：<ul><li><code>jedis</code>连接<code>Redis</code>服务器是直连模式，<b style="color: #FF0000">当多线程模式下使用jedis会存在线程安全问题</b>，解决方案可以通过配置连接池使每个连接专用，这样整体性能就大受影响。</li><li><code>lettcus</code>基于<code>Netty</code>框架进行与Redis服务器连接，底层设计中采用<code>StatefulRedisConnection</code>。<code>StatefulRedisConnection</code>自身是线程安全的，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然<code>lettcus</code>也支持多连接实例一起工作。</li></ul></li></ul><br><h3 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h3><blockquote><p>MongoDB是一个开源、高性能、无模式的文档型数据库。</p><p>NoSQL数据库产品中的一种，是最像关系型数据库的非关系型数据库。</p></blockquote><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><p>淘宝用户数据</p><ul><li>存储位置：数据库</li><li>特征：永久性存储，修改频度极低</li></ul></li><li><p>游戏装备数据、游戏道具数据</p><ul><li>存储位置：数据库、<strong>Mongodb</strong></li><li>特征：永久性存储与临时存储相结合、修改频度较高</li></ul></li><li><p>直播数据、打赏数据、粉丝数据</p><ul><li>存储位置：数据库、<strong>Mongodb</strong></li><li>特征：永久性存储与临时存储相结合，修改频度极高</li></ul></li><li><p>物联网数据</p><ul><li>存储位置：<strong>Mongodb</strong></li><li>特征：临时存储，修改频度飞速</li></ul></li></ul><br><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><ul><li><p>服务端启动</p><pre class="language-shell" data-language="shell"><code class="language-shell">mongod --dbpath<span class="token operator">=</span><span class="token punctuation">..</span><span class="token punctuation">\</span>data<span class="token punctuation">\</span>db</code></pre></li><li><p>客户端启动</p><blockquote><p>参数如果遵循默认则可以不指定。</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell">mongo --host<span class="token operator">=</span><span class="token number">127.0</span>.0.1 --port<span class="token operator">=</span><span class="token number">27017</span></code></pre></li></ul><blockquote><p>安装过程中可能会出现的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241808077.png" alt="image-20220211185153583" loading="lazy"></p><p><strong>解决方案：</strong></p><ol><li><p>下载对应的dll文件（通过互联网搜索即可）</p></li><li><p>拷贝到windows安装路径下的system32目录中</p></li><li><p>执行命令注册对应dll文件</p><pre class="language-shell" data-language="shell"><code class="language-shell">regsvr32 vcruntime140_1.dll</code></pre></li></ol></blockquote><br><h4 id="Mongodb基础CRUD"><a href="#Mongodb基础CRUD" class="headerlink" title="Mongodb基础CRUD"></a>Mongodb基础CRUD</h4><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">// 添加数据（文档）</span>db<span class="token punctuation">.</span>book<span class="token punctuation">.</span><span class="token keyword">save</span><span class="token punctuation">(</span>&#123;<span class="token string">"name"</span>:<span class="token string">"SpringBoot"</span><span class="token punctuation">,</span> <span class="token keyword">type</span>: <span class="token string">"SpringBoot"</span>&#125;<span class="token punctuation">)</span><span class="token comment">// 查询</span>db<span class="token punctuation">.</span>book<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>book<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;<span class="token keyword">type</span>:<span class="token string">"SpringBoot"</span>&#125;<span class="token punctuation">)</span><span class="token comment">// 删除</span>db<span class="token punctuation">.</span>book<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>&#123;<span class="token keyword">type</span>: <span class="token string">"SpringBoot"</span>&#125;<span class="token punctuation">)</span><span class="token comment">// 删库跑路</span>db<span class="token punctuation">.</span>book<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>&#123;&#125;<span class="token punctuation">)</span><span class="token comment">// 修改</span>db<span class="token punctuation">.</span>book<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>&#123;name:<span class="token string">"SpringBoot"</span>&#125;<span class="token punctuation">,</span> &#123;$<span class="token keyword">set</span>:&#123;name:<span class="token string">"SpringBoot2"</span>&#125;&#125;<span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241809725.png" alt="image-20220211190957313" loading="lazy"><em>增删改</em></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241809823.png" alt="image-20220211191059026" loading="lazy"><em>查</em></p> <br><h4 id="SpringBoot整合Mongodb"><a href="#SpringBoot整合Mongodb" class="headerlink" title="SpringBoot整合Mongodb"></a>SpringBoot整合Mongodb</h4><ol><li><p>导入SpringBoot整合Mongodb坐标</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置Redis（采用默认配置）</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> mongodb<span class="token punctuation">:</span>//localhost/itheima</code></pre></li><li><p>客户端操作Mongodb</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringBoot15MongodbApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"SpringBoot_idea2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"SpringBoot_idea2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"SpringBoot_idea2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>book <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241809973.png" alt="image-20220211192120077" loading="lazy"><em>查询</em></p></li></ol><br><h3 id="Elasticsearch（ES）"><a href="#Elasticsearch（ES）" class="headerlink" title="Elasticsearch（ES）"></a>Elasticsearch（ES）</h3><blockquote><p>Elasticsearch是一个分布式全文搜索引擎</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241809456.png" alt="image-20220211192557921" loading="lazy"></p><h4 id="ES索引操作"><a href="#ES索引操作" class="headerlink" title="ES索引操作"></a>ES索引操作</h4><ul><li><p>创建索引</p><pre class="language-java" data-language="java"><code class="language-java">PUT http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books</code></pre></li><li><p>查询索引</p><pre class="language-java" data-language="java"><code class="language-java">GET http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books</code></pre></li><li><p>删除索引</p><pre class="language-java" data-language="java"><code class="language-java">DELETE http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books</code></pre></li><li><p>创建索引并指定规则（规则：按照什么XX来进行分词）</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>                <span class="token property">"copy_to"</span><span class="token operator">:</span> <span class="token string">"all"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>                <span class="token property">"copy_to"</span><span class="token operator">:</span> <span class="token string">"all"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"all"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><br><h4 id="ES文档操作"><a href="#ES文档操作" class="headerlink" title="ES文档操作"></a>ES文档操作</h4><h5 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h5><pre class="language-java" data-language="java"><code class="language-java">POST http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books<span class="token operator">/</span>_doc  # 使用系统生成idPOST http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books<span class="token operator">/</span>_create<span class="token operator">/</span><span class="token number">1</span>  # 使用指定idPOST http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1</span>  # 使用指定id，不存在创建，存在更新（版本递增）</code></pre><pre class="language-json" data-language="json"><code class="language-json"># 携带参数<span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">,</span><span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">&#125;</span></code></pre><h5 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h5><pre class="language-java" data-language="java"><code class="language-java">GET http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1</span>  # 查询单个文档GET http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books<span class="token operator">/</span>_search  # 查询全部文档</code></pre><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><pre class="language-java" data-language="java"><code class="language-java">GET http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books<span class="token operator">/</span>_search<span class="token operator">?</span>q<span class="token operator">=</span>name<span class="token operator">:</span><span class="token class-name">SpringBoot</span></code></pre><h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><pre class="language-java" data-language="java"><code class="language-java">DELETE http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1</span></code></pre><h5 id="修改文档（全量修改，覆盖操作）"><a href="#修改文档（全量修改，覆盖操作）" class="headerlink" title="修改文档（全量修改，覆盖操作）"></a>修改文档（全量修改，覆盖操作）</h5><pre class="language-java" data-language="java"><code class="language-java">PUT http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1</span></code></pre><pre class="language-json" data-language="json"><code class="language-json"># 携带参数<span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">,</span><span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">&#125;</span></code></pre><h5 id="修改文档（部分修改）"><a href="#修改文档（部分修改）" class="headerlink" title="修改文档（部分修改）"></a>修改文档（部分修改）</h5><pre class="language-java" data-language="java"><code class="language-java">POST http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9200</span><span class="token operator">/</span>books<span class="token operator">/</span>_update<span class="token operator">/</span><span class="token number">1</span></code></pre><pre class="language-json" data-language="json"><code class="language-json"># 携带参数<span class="token punctuation">&#123;</span><span class="token property">"doc"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"SpringBoot"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><h4 id="SpringBoot整合ES"><a href="#SpringBoot整合ES" class="headerlink" title="SpringBoot整合ES"></a>SpringBoot整合ES</h4><h5 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h5><ol><li><p>导入ES坐标（使用新版，但是SpringBoot还没有适配）</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--新版本--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建客户端（不能自动装配，需要手搓）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">RestHighLevelClient</span> client<span class="token punctuation">;</span><span class="token comment">/** * 测试的前置操作--创建客户端  */</span><span class="token annotation punctuation">@BeforeEach</span><span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpHost</span> host <span class="token operator">=</span> <span class="token class-name">HttpHost</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RestClientBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>    client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 测试的后置操作--关闭客户端 * @throws IOException */</span><span class="token annotation punctuation">@AfterEach</span><span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>创建索引</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 创建索引 * @throws IOException */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 客户端操作</span>    <span class="token class-name">CreateIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取操作客户端的索引对象, 调用创建索引操作</span>    client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h5 id="创建带分词器的索引"><a href="#创建带分词器的索引" class="headerlink" title="创建带分词器的索引"></a>创建带分词器的索引</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据ik分词器创建索引 * @throws IOException */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateIndexByIk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 客户端操作</span>    <span class="token class-name">CreateIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置要执行的操作</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"&#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"    \"mappings\": &#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"properties\": &#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"id\": &#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\": \"keyword\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &#125;,\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"name\": &#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\": \"text\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"analyzer\": \"ik_max_word\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"copy_to\": \"all\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &#125;,\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"description\": &#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\": \"text\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"analyzer\": \"ik_max_word\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"copy_to\": \"all\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &#125;,\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"type\": &#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\": \"keyword\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &#125;,\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"all\": &#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\": \"text\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"analyzer\": \"ik_max_word\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &#125;\n"</span> <span class="token operator">+</span>            <span class="token string">"        &#125;\n"</span> <span class="token operator">+</span>            <span class="token string">"    &#125;\n"</span> <span class="token operator">+</span>            <span class="token string">"&#125;"</span><span class="token punctuation">;</span>    <span class="token comment">// 设置请求参数, 参数类型json数据</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取操作客户端的索引对象, 调用创建索引操作</span>    client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 添加文档(单个) */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Book</span> book <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指定索引</span>    <span class="token class-name">IndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 添加文档(批处理) */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateDocAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 批处理请求的容器</span>    <span class="token class-name">BulkRequest</span> bulk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>book <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 指定索引和id</span>        <span class="token class-name">IndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        bulk<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行</span>    client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulk<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="查询文档-1"><a href="#查询文档-1" class="headerlink" title="查询文档"></a>查询文档</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 按照id查询 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">GetRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">GetResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> book <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查询多个数据 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建查询book的索引</span>    <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchSourceBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加查询条件</span>    <span class="token comment">// 查询name字段里面含有java的数据</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">,</span> <span class="token string">"spring"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取所有命中的信息</span>    <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hits<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>hit <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> source <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> book <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据id删除 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">DeleteRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br><h2 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><blockquote><ul><li>缓存是一种介于数据永久存储介质与数据应用之间的数据临时存储介质</li><li>使用缓存可以有效的减少低速数据读取过程的次数（例如磁盘IO），提高系统性能</li><li>缓存不仅可用于提高永久性存储介质的数据读取效率，还可以提供临时的数据存储空间</li></ul></blockquote><h4 id="手工模拟缓存"><a href="#手工模拟缓存" class="headerlink" title="手工模拟缓存"></a>手工模拟缓存</h4><blockquote><p>book</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">BookDao</span> bookDao<span class="token punctuation">;</span><span class="token comment">// 自定义缓存存储对象</span><span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">></span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果当前缓存没有本次要查询的数据, 则进行查询, 否则返回缓存中存在的数据</span>    <span class="token class-name">Book</span> book <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>book <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Book</span> queryBook <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> queryBook<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queryBook<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> book<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>tel</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 缓存</span><span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 获取验证码 * @param tel * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> code <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>tel<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tel<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> code<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 根据验证码进行检验 * @param tel * @param code * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> queryCode <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>queryCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br><h4 id="simple（默认）"><a href="#simple（默认）" class="headerlink" title="simple（默认）"></a>simple（默认）</h4><ol><li><p>导入cache坐标</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--cache--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>启用缓存</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">// 开启缓存功能</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CacheApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>设置当前操作的结果数据进入缓存</p><blockquote class="info">    第一次操作的时候会从cacheSpace空间的缓存中读取，如果存在则读取，不存在则存放。</blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cacheSpace"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span> <span class="token comment">// 根据ID保存缓存数据</span><span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><br><h4 id="以下缓存均需要使用的代码"><a href="#以下缓存均需要使用的代码" class="headerlink" title="以下缓存均需要使用的代码"></a>以下缓存均需要使用的代码</h4><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241809065.png" alt="image-20220213163438644" loading="lazy"><em>项目需求分析</em></p><p><strong>基本代码</strong></p><blockquote><p>默认使用的是simple</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// bean</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimCode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> tel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Service</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SimCodeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendCodeToSim</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SimCode</span> simCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// ServiceImpl</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SimCodeService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CodeUtils</span> codeUtils<span class="token punctuation">;</span>    <span class="token comment">/**     * 给手机号发送验证码     * @param tel     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">// value 指定存放位置</span>    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"simCode"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#tel"</span><span class="token punctuation">)</span> <span class="token comment">// 这个注解仅仅是保存缓存</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendCodeToSim</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 检验手机号和验证码是否匹配     * @param 封装的电话实体类     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SimCode</span> simCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 取出内存中的验证码与传递过来的验证码比对, 如果相同, 返回true</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> simCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> cacheCode <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>simCode<span class="token punctuation">.</span><span class="token function">getTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cacheCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// utils</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> patch <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"000000"</span><span class="token punctuation">,</span> <span class="token string">"00000"</span><span class="token punctuation">,</span> <span class="token string">"0000"</span><span class="token punctuation">,</span> <span class="token string">"000"</span><span class="token punctuation">,</span> <span class="token string">"00"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 根据手机号计算出6位随机数字     * @param tel 传入的手机号     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> encryption <span class="token operator">=</span> <span class="token number">20220207</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> hash <span class="token operator">^</span> encryption<span class="token punctuation">;</span>        <span class="token keyword">long</span> nowTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> result <span class="token operator">^</span> nowTime<span class="token punctuation">;</span>        <span class="token keyword">long</span> code <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token operator">%</span> <span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        code <span class="token operator">=</span> code <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>code <span class="token operator">:</span> code<span class="token punctuation">;</span>        <span class="token class-name">String</span> codeStr <span class="token operator">=</span> code <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> codeStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 补零操作</span>        <span class="token keyword">return</span> patch<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">+</span> codeStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 从缓存中读取验证码     * 注：这个方法如果想生效，必须将其放进容器，走spring处理bean的模式     * @param tel     * @return 如果没有数据则返回null     */</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"simCode"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#tel"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Controller</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sim"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimCodeController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SimCodeService</span> simCodeService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"&#123;tel&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> simCodeService<span class="token punctuation">.</span><span class="token function">sendCodeToSim</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SimCode</span> simCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> simCodeService<span class="token punctuation">.</span><span class="token function">checkCode</span><span class="token punctuation">(</span>simCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><h4 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h4><ol><li><p>加入Ehcache坐标（缓存供应商实现）</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--ehcache--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>缓存设定为使用Ehcache</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> ehcache    <span class="token key atrule">ehcache</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span> ehcache.xml</code></pre></li><li><p>提供ehcache配置文件ehcache.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">updateCheck</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\ehcache<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--默认缓存策略 --></span>    <span class="token comment">&lt;!-- external：是否永久存在，设置为true则不会被清除，此时与timeout冲突，通常设置为false--></span>    <span class="token comment">&lt;!-- diskPersistent：是否启用磁盘持久化--></span>    <span class="token comment">&lt;!-- maxElementsInMemory：最大缓存数量--></span>    <span class="token comment">&lt;!-- overflowToDisk：超过最大缓存数量是否持久化到磁盘--></span>    <span class="token comment">&lt;!-- timeToIdleSeconds：最大不活动间隔，设置过长缓存容易溢出，设置过短无效果，可用于记录时效性数据，例如验证码--></span>    <span class="token comment">&lt;!-- timeToLiveSeconds：最大存活时间--></span>    <span class="token comment">&lt;!-- memoryStoreEvictionPolicy：缓存清除策略--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>        <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>        <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>        <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token comment">&lt;!-- name="simCode" 对应上方在向缓存中放入数据时指定的缓存空间 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>simCode<span class="token punctuation">"</span></span>        <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>        <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>        <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span></code></pre><br></li></ol><h4 id="Redis-1"><a href="#Redis-1" class="headerlink" title="Redis"></a>Redis</h4><ol><li><p>加入Redis坐标（缓存供应商实现）</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--redis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置Redis服务器，缓存设定为使用Redis</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token comment">#--redis--</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis    <span class="token comment"># 相关配置</span>    <span class="token key atrule">redis</span><span class="token punctuation">:</span>      <span class="token key atrule">cache-null-values</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否缓存空值</span>      <span class="token comment"># key-prefix: sms_         # 绑定前缀</span>      <span class="token key atrule">time-to-live</span><span class="token punctuation">:</span> 10s        <span class="token comment"># 存活时间</span>      <span class="token key atrule">use-key-prefix</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 是否使用前缀(key)</span></code></pre></li><li><p>Redis服务器相关指令</p><pre class="language-shell" data-language="shell"><code class="language-shell">启动服务器：redis-server.exe redis.windows.conf启动客户端：redis-cli.exe清空数据：flushdb</code></pre></li></ol><br><h4 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h4><blockquote><p>memcached的安装</p><ol><li>安装memcached：<code>memcached.exe -d install</code> （管理员身份运行cmd）</li><li>启动memcached：<code>memcached.exe -d start</code> </li><li>关闭memcached：<code>memcached.exe -d stop</code></li></ol></blockquote><ol><li><p>加入Xmemcache坐标（缓存供应商实现）</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--xmamcached--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.googlecode.xmemcached<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xmemcached<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置mamcached服务器必要属性</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># memcached配置信息</span><span class="token key atrule">memcached</span><span class="token punctuation">:</span>  <span class="token comment"># memcached服务器地址</span>  <span class="token key atrule">servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">11211</span>  <span class="token comment"># 连接池数量</span>  <span class="token key atrule">poolSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token comment"># 设置默认操作超时</span>  <span class="token key atrule">opTimeout</span><span class="token punctuation">:</span> <span class="token number">3000</span></code></pre></li><li><p>创建读取属性配置信息类，加载配置</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"memcached"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMemcachedProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> servers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> poolSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> opTimeout<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>创建客户端配置类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMemcachedConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">XMemcachedProperties</span> xMemcachedProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MemcachedClient</span> <span class="token function">getMemcachedClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 配置相关参数信息</span>        <span class="token class-name">MemcachedClientBuilder</span> memcachedClientBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMemcachedClientBuilder</span><span class="token punctuation">(</span>xMemcachedProperties<span class="token punctuation">.</span><span class="token function">getServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> memcachedClientBuilder<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>xMemcachedProperties<span class="token punctuation">.</span><span class="token function">getOpTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  memcachedClientBuilder<span class="token punctuation">.</span><span class="token function">setConnectionPoolSize</span><span class="token punctuation">(</span>xMemcachedProperties<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MemcachedClient</span> memcachedClient <span class="token operator">=</span> memcachedClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> memcachedClient<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>配置mamcachd属性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">MemcachedClient</span> memcachedClient<span class="token punctuation">;</span><span class="token comment">/** * 将数据放入缓存 * @param tel * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendCodeToSim</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        memcachedClient<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0代表永不过期</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> code<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 将数据从缓存读出 * @param simCode * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SimCode</span> simCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        code <span class="token operator">=</span> memcachedClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>simCode<span class="token punctuation">.</span><span class="token function">getTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> simCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><br><h4 id="jetcache（阿里）"><a href="#jetcache（阿里）" class="headerlink" title="jetcache（阿里）"></a>jetcache（阿里）</h4><blockquote><ul><li><p>jetCache对SpringCache进行了封装，在原有功能基础上实现了多级缓存、缓存统计、自动刷新、异步调用、数据报表等功能。</p></li><li><p>jetCache设定了本地缓存与远程缓存的多级缓存解决方案</p><ul><li>本地缓存（local）<ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li>远程缓存（remote）<ul><li>Redis</li><li>Tair</li></ul></li></ul></li></ul></blockquote><ol><li><p>加入jetcache坐标</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--jetcache--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alicp.jetcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jetcache-starter-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置<strong>远程缓存</strong>的必要属性</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 配置jetcache相关参数</span><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">remote</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认配置</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis <span class="token comment"># 使用redis</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span> <span class="token comment"># redis 默认端口</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>  <span class="token comment"># 必须的属性</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token key atrule">sim</span><span class="token punctuation">:</span>  <span class="token comment"># 其他配置</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span> <span class="token comment"># redis 默认端口</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span> <span class="token comment"># 必须的属性</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span></code></pre></li><li><p>配置<strong>本地缓存</strong>的必要属性</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认配置</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> linkedhashmap      <span class="token key atrule">keyConvertor</span><span class="token punctuation">:</span> fastjson</code></pre></li></ol><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241809363.png" alt="image-20220213184004317" loading="lazy"><em>配置属性说明</em></p><ol start="4"><li><p>开启jetcache注解支持</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">// jetcache启用缓存的主开关</span><span class="token annotation punctuation">@EnableCreateCacheAnnotation</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JetCacheApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBoot18JetCacheApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>声明缓存对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SimCodeService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CodeUtils</span> codeUtils<span class="token punctuation">;</span>    <span class="token comment">/**     * name: 指定名字     * expire: 到期时间（s）     * timeUnit: 时间单位     */</span>    <span class="token comment">// remote</span><span class="token comment">//    @CreateCache(area = "sim", name = "jetCache_", expire = 10, timeUnit = TimeUnit.SECONDS)</span>        <span class="token comment">// local</span>    <span class="token comment">// cacheType指定本地缓存,默认是远程缓存,都缓存是both</span>    <span class="token annotation punctuation">@CreateCache</span><span class="token punctuation">(</span>cacheType <span class="token operator">=</span> <span class="token class-name">CacheType</span><span class="token punctuation">.</span>LOCAL<span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"jetCache_"</span><span class="token punctuation">,</span> expire <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> jetCache<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>操作缓存</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SimCodeService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将数据存放到缓存</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendCodeToSim</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        jetCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tel<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将数据从缓存中取出</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SimCode</span> simCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> jetCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>simCode<span class="token punctuation">.</span><span class="token function">getTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><p><b style="color: #FF0000">jetcache启用方法注解</b></p><ol><li><p>启用方法注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">// jetcache启用缓存的主开关</span><span class="token annotation punctuation">@EnableCreateCacheAnnotation</span><span class="token comment">// 开启方法注解缓存</span><span class="token annotation punctuation">@EnableMethodCache</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"xyz.teng"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBoot18JetCacheApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBoot18JetCacheApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>shi用方法注解操作缓存</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookDao</span> bookDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Cached</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"book_"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">,</span> expire <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">,</span> cacheType <span class="token operator">=</span> <span class="token class-name">CacheType</span><span class="token punctuation">.</span>REMOTE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@CacheRefresh</span><span class="token punctuation">(</span>refresh <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 5秒执行一次该操作</span>    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">// 当执行更新操作的时候,缓存里面的内容也同步更新</span>    <span class="token annotation punctuation">@CacheUpdate</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"book_"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#book.id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"#book"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">// 当执行删除操作的时候,缓存里面的内容也同步删除</span>    <span class="token annotation punctuation">@CacheInvalidate</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"book_"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>缓存对象需要保证是可序列化的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">remote</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认配置</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis <span class="token comment"># 使用redis</span>      <span class="token comment"># ---下面这三个需要同步配置---</span>      <span class="token key atrule">keyConvertor</span><span class="token punctuation">:</span> fastjson      <span class="token key atrule">valueEncode</span><span class="token punctuation">:</span> java      <span class="token key atrule">valueDecode</span><span class="token punctuation">:</span> java</code></pre></li></ol><blockquote><p>查看缓存报告统计</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token comment"># 开启统计数据</span>  <span class="token key atrule">statIntervalMinutes</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 1分钟</span></code></pre></blockquote><br><h4 id="j2cache"><a href="#j2cache" class="headerlink" title="j2cache"></a>j2cache</h4><blockquote><p>j2cache是一个缓存整合框架，可以提供缓存的整合方案，使各种缓存搭配使用，自身不提供缓存功能</p><p><b style="color: #FF0000">基于 ehcache + redis 进行整合</b></p></blockquote><ol><li><p>加入j2cache坐标，加入整合缓存的坐标</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.oschina.j2cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>j2cache-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.4-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.oschina.j2cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>j2cache-spring-boot2-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置使用j2cache（application.yml）</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">j2cache</span><span class="token punctuation">:</span>  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> j2cache.properties</code></pre></li><li><p>配置一级缓存与二级缓存以及一级缓存数据到二级缓存的发送方式（j2cache.properties）</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 一级缓存</span><span class="token key attr-name">j2cache.L1.provider_class</span> <span class="token punctuation">=</span> <span class="token value attr-value">ehcache</span><span class="token comment"># 指定ehcache配置文件</span><span class="token key attr-name">ehcache.configXml</span> <span class="token punctuation">=</span> <span class="token value attr-value">ehcache.xml</span><span class="token comment"># 关闭二级缓存</span><span class="token key attr-name">j2cache.l2-cache-open</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span class="token comment"># 二级缓存(全类名)</span><span class="token key attr-name">j2cache.L2.provider_class</span> <span class="token punctuation">=</span> <span class="token value attr-value">net.oschina.j2cache.cache.support.redis.SpringRedisProvider</span><span class="token comment"># 这个地方的 redis 影响下面配置属性的名字</span><span class="token key attr-name">j2cache.L2.config_section</span> <span class="token punctuation">=</span> <span class="token value attr-value">redis</span><span class="token key attr-name">redis.hosts</span> <span class="token punctuation">=</span> <span class="token value attr-value">localhost:6379</span><span class="token comment"># 配置一级缓存数据到二级缓存的广播方式: 可以使用redis提供的消息订阅模式, 也可以使用jgroups多播实现</span><span class="token key attr-name">j2cache.broadcast</span> <span class="token punctuation">=</span> <span class="token value attr-value">net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy</span><span class="token key attr-name">redis.mode</span> <span class="token punctuation">=</span> <span class="token value attr-value">single</span><span class="token comment"># 配置命名空间</span><span class="token key attr-name">redis.namespace</span> <span class="token punctuation">=</span> <span class="token value attr-value">j2cache</span></code></pre></li><li><p>设置使用缓存</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SimCodeService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CodeUtils</span> codeUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CacheChannel</span> cacheChannel<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendCodeToSim</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        cacheChannel<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"sim"</span><span class="token punctuation">,</span> tel<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SimCode</span> simCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> cacheChannel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sim"</span><span class="token punctuation">,</span> simCode<span class="token punctuation">.</span><span class="token function">getTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><br><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置高级&quot;&gt;&lt;a href=&quot;#配置高级&quot; class=&quot;headerlink&quot; title=&quot;配置高级&quot;&gt;&lt;/a&gt;配置高级&lt;/h2&gt;&lt;h3 id=&quot;ConfigurationProperties&quot;&gt;&lt;a href=&quot;#ConfigurationPropertie</summary>
      
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Spring" scheme="https://qianchenjun.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot运维</title>
    <link href="https://qianchenjun.github.io/posts/8bb48816/"/>
    <id>https://qianchenjun.github.io/posts/8bb48816/</id>
    <published>2022-01-29T05:39:25.000Z</published>
    <updated>2022-01-30T05:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot程序的打包和运行"><a href="#SpringBoot程序的打包和运行" class="headerlink" title="SpringBoot程序的打包和运行"></a>SpringBoot程序的打包和运行</h2><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241807859.png" alt="image-20220129142809887" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241807775.png" alt="image-20220129142800069" loading="lazy"></p><blockquote><ol><li>开发部门使用Git、SVN等版本控制工具上传工程到版本服务器</li><li>服务器使用版本控制工具下载工程</li><li>服务器上使用Maven工具在当前真机环境下重新构建项目</li><li>启动服务</li></ol></blockquote><h3 id="程序打包"><a href="#程序打包" class="headerlink" title="程序打包"></a>程序打包</h3><h4 id="IDEA环境下的打包"><a href="#IDEA环境下的打包" class="headerlink" title="IDEA环境下的打包"></a>IDEA环境下的打包</h4><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241807762.png" alt="image-20220129142925474" loading="lazy"></p><h4 id="命令行打包"><a href="#命令行打包" class="headerlink" title="命令行打包"></a>命令行打包</h4><pre class="language-java" data-language="java"><code class="language-java">mvn <span class="token keyword">package</span></code></pre><p>打包后会产生一个与工程名类似的jar文件，其名称是由模块名+版本号+.jar组成的。</p><h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><pre class="language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span>jar 工程包名<span class="token punctuation">.</span>jar</code></pre><p>&amp;emsp;&amp;emsp;执行程序打包指令后，程序正常运行，与在Idea下执行程序没有区别。</p><p>&amp;emsp;&amp;emsp;<b style="color: #FF0000">注意</b>：如果你的计算机中没有安装java的jdk环境，是无法正确执行上述操作的，因为程序执行使用的是java指令。</p><p>&amp;emsp;&amp;emsp;<b style="color: #FF0000">注意：在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这一段配置千万不能删除，否则打包后无法正常执行程序。</b></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><blockquote class="yellow">    <b style="color: #FF0000">spring-boot-maven-plugin</b>插件用于将当前程序打包成一个可以独立运行的程序包</blockquote><p><strong>总结</strong></p><ol><li><code>SpringBoot</code>工程可以基于<code>java</code>环境下独立运行<code>jar</code>文件启动服务</li><li><code>SpringBoot</code>工程执行<code>mvn</code>命令<code>package</code>进行打包</li><li>执行<code>jar</code>命令：<code>java –jar 工程名.jar</code></li></ol><h3 id="命令行启动常见问题及解决方案"><a href="#命令行启动常见问题及解决方案" class="headerlink" title="命令行启动常见问题及解决方案"></a>命令行启动常见问题及解决方案</h3><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查询端口</span><span class="token function">netstat</span> -ano<span class="token comment"># 查询指定端口</span><span class="token function">netstat</span> -ano <span class="token operator">|</span>findstr <span class="token string">"端口号"</span><span class="token comment"># 根据进程PID查询进程名称</span>tasklist <span class="token operator">|</span>findstr <span class="token string">"进程PID号"</span><span class="token comment"># 根据PID杀死任务</span>taskkill /F /PID <span class="token string">"进程PID号"</span><span class="token comment"># 根据进程名称杀死任务</span>taskkill -f -t -im <span class="token string">"进程名称"</span></code></pre><h3 id="SpringBoot项目快速启动（Linux版）"><a href="#SpringBoot项目快速启动（Linux版）" class="headerlink" title="SpringBoot项目快速启动（Linux版）"></a>SpringBoot项目快速启动（Linux版）</h3><blockquote><p>需要满足的条件</p><ol><li>Linux系统安装了jdk，mysql（版本与jar包来源尽可能相近）</li><li>jar包里面的数据库相关信息（账号密码）与Linux保持一致</li><li>开放mysql的3306端口</li><li>开放Linux数据库允许任何ip访问</li></ol></blockquote><ol><li><p>将打包好的jar包上传至Linux服务器（我这里选择了 &#x2F;usr&#x2F;app&#x2F; 目录）</p><blockquote class="danger">    这个打包好的jar包需要你保证Linux的mysql账号密码与你打包之前的文件相同，以及mysql版本的大体一致性。否则一定会出错！</blockquote></li><li><p>开放mysql的3306端口</p><pre class="language-shell" data-language="shell"><code class="language-shell">firewall-cmd --permanent --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp  <span class="token comment"># 开放端口</span>firewall-cmd --reload <span class="token comment"># 刷新状态</span></code></pre></li><li><p>使用navicat连接远程的mysql（这个时候可能会出现不让连接的情况）</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 在你的Linux操作数据库</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span>  <span class="token comment"># 使用 mysql 这个库</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span> <span class="token comment"># 允许任何ip链接</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span> <span class="token comment"># 刷新权限</span></code></pre></li><li><p>创建数据库以及对应的表（顺便将你的数据传输进去）</p></li><li><p>在Linux放置jar的目录</p><pre class="language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span>jar 工程包名<span class="token punctuation">.</span>jar</code></pre></li><li><p>大功告成！</p></li></ol><blockquote><p>我失败了….</p><p>这个地方我的mysql版本差距太大了…</p></blockquote><h2 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h2><h3 id="临时属性设置"><a href="#临时属性设置" class="headerlink" title="临时属性设置"></a>临时属性设置</h3><blockquote><p>当程序打好包后需要更改部分设置。</p></blockquote><p>&amp;emsp;&amp;emsp;SpringBoot提供了灵活的配置方式，如果你发现你的项目中有个别属性需要重新配置，可以使用临时属性的方式快速修改某些配置。</p><pre class="language-shell" data-language="shell"><code class="language-shell">java –jar springboot.jar –-server.port<span class="token operator">=</span><span class="token number">80</span></code></pre><p><b style="color: #FF0000">注意：这里面书写的格式是properties文件格式</b></p><p>&amp;emsp;&amp;emsp;多个属性：空格隔开即可</p><pre class="language-shell" data-language="shell"><code class="language-shell">java –jar springboot.jar –-server.port<span class="token operator">=</span><span class="token number">80</span> --logging.level.root<span class="token operator">=</span>debug</code></pre><h4 id="属性加载优先级"><a href="#属性加载优先级" class="headerlink" title="属性加载优先级"></a>属性加载优先级</h4><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config">官方链接</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241807155.png" alt="image-20220129144302230" loading="lazy"><em>官网提供的所有配置的优先级</em></p><p><strong>总结</strong></p><ol><li>使用jar命令启动SpringBoot工程时可以使用临时属性替换配置文件中的属性</li><li>临时属性添加方式：java –jar 工程名.jar –-属性名&#x3D;值</li><li>多个临时属性之间使用空格分隔</li><li>临时属性必须是当前boot工程支持的属性，否则设置无效</li></ol><h4 id="开发中使用临时属性"><a href="#开发中使用临时属性" class="headerlink" title="开发中使用临时属性"></a>开发中使用临时属性</h4><p>&amp;emsp;&amp;emsp;打开SpringBoot引导类的运行界面，在里面找到配置项。其中Program arguments对应的位置就是添加临时属性。</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241807635.png" alt="image-20220129144546509" loading="lazy"><em>配置临时参数</em></p><h3 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h3><blockquote><p>SpringBoot提供了配置文件和临时属性的方式来对程序进行配置。</p><ul><li>类路径下配置文件（一直使用的是这个，也就是resources目录中的application.yml文件）</li><li>类路径下config目录下配置文件</li><li>程序包所在目录中配置文件</li><li>程序包所在目录中config目录下配置文件</li></ul></blockquote><p>当四个文件同时存在的时候会有一个优先级的问题：</p><ol><li><code>file ：config/application.yml</code> <strong>【最高】</strong></li><li><code>file ：application.yml</code></li><li><code>classpath：config/application.yml</code></li><li><code>classpath：application.yml</code>  <strong>【最低】</strong></li></ol><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>场景A：你作为一个开发者，你做程序的时候为了方便自己写代码，配置的数据库肯定是连接你自己本机的，咱们使用4这个级别，也就是之前一直用的application.yml。</li><li>场景B：现在项目开发到了一个阶段，要联调测试了，连接的数据库是测试服务器的数据库，肯定要换一组配置吧。你可以选择把你之前的文件中的内容都改了，目前还不麻烦。</li><li>场景C：测试完了，一切OK。你继续写你的代码，你发现你原来写的配置文件被改成测试服务器的内容了，你要再改回来。现在明白了不？场景B中把你的内容都改掉了，你现在要重新改回来，以后呢？改来改去吗？</li></ul><p>&amp;emsp;&amp;emsp;解决方案很简单，用上面的3这个级别的配置文件就可以快速解决这个问题，再写一个配置就行了。两个配置文件共存，因为config目录中的配置加载优先级比你的高，所以配置项如果和级别4里面的内容相同就覆盖了，这样是不是很简单？</p><p>&amp;emsp;&amp;emsp;级别1和2什么时候使用呢？程序打包以后就要用这个级别了，管你程序里面配置写的是什么？我的级别高，可以轻松覆盖你，就不用考虑这些配置冲突的问题了。</p><p><strong>总结</strong></p><ol><li><p>配置文件分为4种</p><ul><li>项目类路径配置文件：服务于开发人员本机开发与测试</li><li>项目类路径config目录中配置文件：服务于项目经理整体调控</li><li>工程路径配置文件：服务于运维人员配置涉密线上环境</li><li>工程路径config目录中配置文件：服务于运维经理整体调控</li></ul></li><li><p>多层级配置文件间的属性采用叠加并覆盖的形式作用于程序</p></li></ol><h3 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h3><p><strong>方式一：使用临时属性设置配置文件名，注意仅仅是名称，不要带扩展名</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241807630.png" alt="image-20220129145122498" loading="lazy"></p><p><strong>方式二：使用临时属性设置配置文件路径，这个是全路径名</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241807905.png" alt="image-20220129145128926" loading="lazy"></p><p>也可以设置加载多个配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241807244.png" alt="image-20220129145146015" loading="lazy"></p><p><strong>总结</strong></p><ol><li>配置文件可以修改名称，通过启动参数设定</li><li>配置文件可以修改路径，通过启动参数设定</li><li>微服务开发中配置文件通过配置中心进行设置</li></ol><h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><h3 id="yaml单一文件"><a href="#yaml单一文件" class="headerlink" title="yaml单一文件"></a>yaml单一文件</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span><span class="token key atrule">active</span><span class="token punctuation">:</span> pro<span class="token comment"># 启动pro</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span> pro       <span class="token comment"># 环境名称</span><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span></code></pre><blockquote><p>每一组的环境中间使用三个减号分隔开</p></blockquote><p>上述格式已经过时，标准格式如下</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>        <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> pro</code></pre><p><strong>总结</strong></p><ol><li>多环境开发需要设置若干种常用环境，例如开发、生产、测试环境</li><li>yaml格式中设置多环境使用—区分环境设置边界</li><li>每种环境的区别在于加载的配置属性不同</li><li>启用某种环境时需要指定启动时使用该环境</li></ol><h3 id="yaml多文件（掌握）"><a href="#yaml多文件（掌握）" class="headerlink" title="yaml多文件（掌握）"></a>yaml多文件（掌握）</h3><p><strong>主配置文件</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span><span class="token key atrule">active</span><span class="token punctuation">:</span> pro<span class="token comment"># 启动pro</span></code></pre><p><strong>application-pro.yaml</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p><strong>application-dev.yaml</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span></code></pre><p>&amp;emsp;&amp;emsp;文件的命名规则为：application-环境名.yml。</p><p>&amp;emsp;&amp;emsp;在配置文件中，如果某些配置项所有环境都一样，可以将这些项写入到主配置中，只有哪些有区别的项才写入到环境配置文件中。</p><ul><li>主配置文件中设置公共配置（全局）</li><li>环境分类配置文件中常用于设置冲突属性（局部）</li></ul><p><strong>总结</strong></p><ol><li>可以使用独立配置文件定义环境属性</li><li>独立配置文件便于线上系统维护更新并保障系统安全性</li></ol><h3 id="properties多文件（了解）"><a href="#properties多文件（了解）" class="headerlink" title="properties多文件（了解）"></a>properties多文件（了解）</h3><p>&amp;emsp;&amp;emsp;SpringBoot最早期提供的配置文件格式是properties格式的，这种格式的多环境配置也了解一下吧。</p><p><strong>主配置文件</strong></p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">pro</span></code></pre><p><strong>环境配置文件</strong></p><p><strong>application-pro.properties</strong></p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">80</span></code></pre><p><strong>application-dev.properties</strong></p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">81</span></code></pre><p>​文件的命名规则为：application-环境名.properties。</p><p><strong>总结</strong></p><ol><li>properties文件多环境配置仅支持多文件格式</li></ol><h3 id="多环境开发独立配置文件书写技巧"><a href="#多环境开发独立配置文件书写技巧" class="headerlink" title="多环境开发独立配置文件书写技巧"></a>多环境开发独立配置文件书写技巧</h3><p><strong>准备工作</strong></p><p>&amp;emsp;&amp;emsp;将所有的配置根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件，命名规则如下</p><ul><li>application-devDB.yml</li><li>application-devRedis.yml</li><li>application-devMVC.yml</li></ul><p><strong>使用</strong></p><p>&amp;emsp;&amp;emsp;使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev        <span class="token key atrule">include</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC</code></pre><p>​比较一下，现在相当于加载dev配置时，再加载对应的3组配置，从结构上就很清晰，用了什么，对应的名称是什么</p><p><b style="color: #FF0000">注意</b></p><p>&amp;emsp;&amp;emsp;<b style="color: #FF0000">当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效</b></p><p><strong>改良</strong></p><p>&amp;emsp;&amp;emsp;SpringBoot从2.4版开始使用group属性替代include属性，降低了配置书写量。简单来说就是都写好所以的配置，用哪个就选择哪个。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev  <span class="token comment"># 更换环境修改这里即可</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span>        <span class="token key atrule">"dev"</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC      <span class="token key atrule">"pro"</span><span class="token punctuation">:</span> proDB<span class="token punctuation">,</span>proRedis<span class="token punctuation">,</span>proMVC      <span class="token key atrule">"test"</span><span class="token punctuation">:</span> testDB<span class="token punctuation">,</span>testRedis<span class="token punctuation">,</span>testMVC</code></pre><p><strong>总结</strong></p><ol><li>多环境开发使用group属性设置配置文件分组，便于线上维护管理</li></ol><h3 id="多环境开发控制"><a href="#多环境开发控制" class="headerlink" title="多环境开发控制"></a>多环境开发控制</h3><blockquote class="danger">    maven和SpringBoot同时设置多环境会产生冲突。</blockquote><blockquote class="success">    但是呢，maven是做什么的？项目构建管理的，最终生成代码包的，SpringBoot是干什么的？简化开发的。简化，又不是其主导作用。最终还是要靠maven来管理整个工程，所以SpringBoot应该听maven的。    <ul>        <li>先在maven环境中设置用什么具体的环境</li>        <li>在SpringBoot中读取maven设置的环境即可</li>    </ul></blockquote><p><strong>maven中设置多环境（使用属性方式区分环境）</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>env_dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.active</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.active</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--默认启动环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>env_pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.active</span><span class="token punctuation">></span></span>pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.active</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span></code></pre><p><strong>SpringBoot中读取maven设置值</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> @profile.active@</code></pre><p>​上面的@属性名@就是读取maven中配置的属性值的语法格式。</p><p><strong>总结</strong></p><ol><li>当Maven与SpringBoot同时对多环境进行控制时，以Mavn为主，SpringBoot使用@..@占位符读取Maven对应的配置属性值</li><li>基于SpringBoot读取Maven配置属性的前提下，如果在Idea下测试工程时pom.xml每次更新需要手动compile方可生效</li></ol><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><blockquote><p>日志的主要作用如下：</p><ul><li>编程期调试代码</li><li>运营期记录信息</li><li>记录日常运营重要信息（峰值流量、平均响应时长……）</li><li>记录应用报错信息（错误堆栈）</li><li>记录运维过程数据（扩容、宕机、报警……）</li></ul></blockquote><h3 id="代码中使用日志工具记录日志"><a href="#代码中使用日志工具记录日志" class="headerlink" title="代码中使用日志工具记录日志"></a>代码中使用日志工具记录日志</h3><p>&amp;emsp;&amp;emsp;日志的使用格式非常固定，直接上操作步骤：</p><p><strong>步骤①</strong>：添加日志记录操作</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">BookController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"springboot is running...2"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>&amp;emsp;&amp;emsp;上述代码中log对象就是用来记录日志的对象，下面的log.debug，log.info这些操作就是写日志的API了。</p><p><strong>步骤②</strong>：设置日志输出级别</p><p>&amp;emsp;&amp;emsp;日志设置好以后可以根据设置选择哪些参与记录。这里是根据日志的级别来设置的。日志的级别分为6种，分别是：</p><ul><li>TRACE：运行堆栈信息，使用率低</li><li>DEBUG：程序员调试代码使用</li><li>INFO：记录运维过程数据</li><li>WARN：记录运维过程报警数据</li><li>ERROR：记录错误堆栈信息</li><li>FATAL：灾难信息，合并计入ERROR</li></ul><p>&amp;emsp;&amp;emsp;一般情况下，开发时候使用DEBUG，上线后使用INFO，运维信息记录使用WARN即可。下面就设置一下日志级别：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span><span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>&amp;emsp;&amp;emsp;这么设置太简单粗暴了，日志系统通常都提供了细粒度的控制</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span><span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 设置日志级别，root表示根节点，即整体应用日志级别</span><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> debug</code></pre><p>&amp;emsp;&amp;emsp;还可以再设置更细粒度的控制</p><p><strong>步骤③</strong>：设置日志组，控制指定包对应的日志输出级别，也可以直接控制指定包对应的日志输出级别</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token comment"># 设置日志组</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span>    <span class="token comment"># 自定义组名，设置当前组中所包含的包</span>        <span class="token key atrule">ebank</span><span class="token punctuation">:</span> com.itheima.controller    <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> warn        <span class="token comment"># 为对应组设置日志级别</span>        <span class="token key atrule">ebank</span><span class="token punctuation">:</span> debug    <span class="token comment"># 为对包设置日志级别</span>        <span class="token key atrule">com.itheima.controller</span><span class="token punctuation">:</span> debug</code></pre><p>&amp;emsp;&amp;emsp;说白了就是总体设置一下，每个包设置一下，如果感觉设置的麻烦，就先把包分个组，对组设置，没了，就这些。</p><p><strong>总结</strong></p><ol><li>日志用于记录开发调试与运维过程消息</li><li>日志的级别共6种，通常使用4种即可，分别是DEBUG，INFO,WARN,ERROR</li><li>可以通过日志组或代码包的形式进行日志显示级别的控制</li></ol><h3 id="优化日志对象创建代码"><a href="#优化日志对象创建代码" class="headerlink" title="优化日志对象创建代码"></a>优化日志对象创建代码</h3><p>&amp;emsp;&amp;emsp;写代码的时候每个类都要写创建日志记录对象，这个可以优化一下，使用前面用过的lombok技术给我们提供的工具类即可。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">BookController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>&amp;emsp;&amp;emsp;导入lombok后使用注解搞定，日志对象名为log</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token comment">//这个注解替代了下面那一行</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">BookController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一句可以不写了</span><span class="token punctuation">&#125;</span></code></pre><p><strong>总结</strong></p><ol><li>基于lombok提供的@Slf4j注解为类快速添加日志对象</li></ol><h3 id="日志输出格式控制"><a href="#日志输出格式控制" class="headerlink" title="日志输出格式控制"></a>日志输出格式控制</h3><p>​日志已经能够记录了，但是目前记录的格式是SpringBoot给我们提供的，如果想自定义控制就需要自己设置了。先分析一下当前日志的记录格式。</p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241807551.png" alt="image-20220130205953985" loading="lazy"></p><p>​对于单条日志信息来说，日期，触发位置，记录信息是最核心的信息。级别用于做筛选过滤，PID与线程名用于做精准分析。了解这些信息后就可以DIY日志格式了。本课程不做详细的研究，有兴趣的小伙伴可以学习相关的知识。下面给出课程中模拟的官方日志模板的书写格式，便于大家学习。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token key atrule">pattern</span><span class="token punctuation">:</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span> <span class="token string">"%d %clr(%p) --- [%16t] %clr(%-40.40c)&#123;cyan&#125; : %m %n"</span></code></pre><p><strong>总结</strong></p><ol><li>日志输出格式设置规则</li></ol><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><p>​日志信息显示，记录已经控制住了，下面就要说一下日志的转存了。日志不能仅显示在控制台上，要把日志记录到文件中，方便后期维护查阅。</p><p>​对于日志文件的使用存在各种各样的策略，例如每日记录，分类记录，报警后记录等。这里主要研究日志文件如何记录。</p><p>​记录日志到文件中格式非常简单，设置日志文件名即可。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token key atrule">file</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> server.log</code></pre><p>​虽然使用上述格式可以将日志记录下来了，但是面对线上的复杂情况，一个文件记录肯定是不能够满足运维要求的，通常会每天记录日志文件，同时为了便于维护，还要限制每个日志文件的大小。下面给出日志文件的常用配置方式：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token key atrule">logback</span><span class="token punctuation">:</span>    <span class="token key atrule">rollingpolicy</span><span class="token punctuation">:</span>        <span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 3KB            <span class="token key atrule">file-name-pattern</span><span class="token punctuation">:</span> server.%d<span class="token punctuation">&#123;</span>yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd<span class="token punctuation">&#125;</span>.%i.log</code></pre><p>​以上格式是基于logback日志技术设置每日日志文件的设置格式，要求容量到达3KB以后就转存信息到第二个文件中。文件命名规则中的%d标识日期，%i是一个递增变量，用于区分日志文件。</p><p><strong>总结</strong></p><ol><li>日志记录到文件</li><li>日志文件格式设置</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SpringBoot程序的打包和运行&quot;&gt;&lt;a href=&quot;#SpringBoot程序的打包和运行&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot程序的打包和运行&quot;&gt;&lt;/a&gt;SpringBoot程序的打包和运行&lt;/h2&gt;&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Spring" scheme="https://qianchenjun.github.io/tags/Spring/"/>
    
    <category term="SpringBoot" scheme="https://qianchenjun.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>找回Linux的root密码</title>
    <link href="https://qianchenjun.github.io/posts/9c94a23c/"/>
    <id>https://qianchenjun.github.io/posts/9c94a23c/</id>
    <published>2022-01-25T14:03:54.000Z</published>
    <updated>2022-01-25T14:03:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先，启动系统，进入开机界面，在界面中按“e”进入编辑界面。如图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241751768.png" alt="image-20220125220715772" loading="lazy"></p><blockquote><p>进入编辑界面，使用键盘上的上下键把光标往下移动，找到以““Linux16”开头内容所在的行数”，在行的最后面输入：<code>init=/bin/sh</code>。如图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241752541.png" alt="image-20220125220802056" loading="lazy"></p><blockquote><p>接着，输入完成后，直接按快捷键：Ctrl+x 进入<strong>单用户模式</strong>。</p></blockquote><blockquote><p>接着，在光标闪烁的位置中输入：mount -o remount,rw &#x2F;（注意：各个单词间有空格），完成后按键盘的回车键（Enter）。如图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241752127.png" alt="image-20220125220831432" loading="lazy"></p><blockquote><p>在新的一行最后面输入：<code>passwd</code>， 完成后按键盘的回车键（Enter）。输入密码，<strong>然后再次确认密码即</strong>可(<strong>密码长度最好8位以上,但不是必须的)</strong>, 密码修改成功后，会显示passwd…..的样式，说明密码修改成功</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241752966.png" alt="image-20220125220934168" loading="lazy"></p><blockquote><p>接着，在鼠标闪烁的位置中（最后一行中）输入：touch &#x2F;.autorelabel（注意：touch与 &#x2F;后面有一个空格），完成后按键盘的回车键（Enter）</p></blockquote><blockquote><p>继续在光标闪烁的位置中，输入：exec &#x2F;sbin&#x2F;init（注意：exec与 &#x2F;后面有一个空格），完成后按键盘的回车键（Enter）,等待系统自动修改密码(<strong>这个过程时间可能有点长，耐心等待</strong>)，完成后，系统会自动重启, <strong>新的密码生效</strong>了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241752303.png" alt="image-20220125221008225" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;首先，启动系统，进入开机界面，在界面中按“e”进入编辑界面。如图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/</summary>
      
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="https://qianchenjun.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>vmware和CentOS安装</title>
    <link href="https://qianchenjun.github.io/posts/41fd3eb0/"/>
    <id>https://qianchenjun.github.io/posts/41fd3eb0/</id>
    <published>2022-01-24T07:38:58.000Z</published>
    <updated>2022-01-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vmware安装"><a href="#vmware安装" class="headerlink" title="vmware安装"></a>vmware安装</h2><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241801259.png" alt="image-20220124164640954" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241801432.png" alt="image-20220124164705690" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241801297.png" alt="image-20220124164715792" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241801018.png" alt="image-20220124164727399" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241801725.png" alt="image-20220124164737352" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241801588.png" alt="image-20220124164752043" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241801970.png" alt="image-20220124164806160" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241801323.png" alt="image-20220124164814756" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802993.png" alt="image-20220124164828036" loading="lazy"></p><blockquote><p>密钥：UG5J2-0ME12-M89WY-NPWXX-WQH88</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802836.png" alt="image-20220124164840286" loading="lazy"></p><h2 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h2><h3 id="检查BIOS虚拟化支持"><a href="#检查BIOS虚拟化支持" class="headerlink" title="检查BIOS虚拟化支持"></a>检查BIOS虚拟化支持</h3><blockquote><p>开机状态按 F10 进入BIOS界面 找到虚拟化设置打开即可。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802868.png" alt="image-20220124154108861" loading="lazy"><em>bios检查</em></p><blockquote><p>这个地方我在安装的时候没有管，但是还是安装成功了。</p></blockquote><h3 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h3><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802479.png" alt="image-20220124154243759" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802809.png" alt="image-20220124154254231" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802430.png" alt="image-20220124154303320" loading="lazy"><em>稍后安装</em></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802774.png" alt="image-20220124154310577" loading="lazy"><em>linux</em></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802634.png" alt="image-20220124154319042" loading="lazy"><em>选择路径</em></p><blockquote><p>这个地方看自己的实际</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802975.png" alt="image-20220124154551691" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802546.png" alt="image-20220124154601134" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802024.png" alt="image-20220124154613541" loading="lazy"><em>NAT模式</em></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802267.png" alt="image-20220124154632296" loading="lazy"></p><h3 id="正式安装Centos系统"><a href="#正式安装Centos系统" class="headerlink" title="正式安装Centos系统"></a>正式安装Centos系统</h3><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802400.png" alt="image-20220124154653285" loading="lazy"><em>选择下载好的CentOS</em></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802019.png" alt="image-20220124154704516" loading="lazy"><em>开启虚拟机</em></p><blockquote><p>选择第一个，不需要 Test this media ，否则检测时间很长</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802865.png" alt="image-20220124154713178" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802658.png" alt="image-20220124154808510" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802915.png" alt="image-20220124154817206" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802146.png" alt="image-20220124154825215" loading="lazy"></p><blockquote class="danger">    等上一步加载完之后再去选择分区</blockquote><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802984.png" alt="image-20220124154832214" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802269.png" alt="image-20220124154839559" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802736.png" alt="image-20220124154846131" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803947.png" alt="image-20220124154925931" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802256.png" alt="image-20220124154933341" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802095.png" alt="image-20220124154939598" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802679.png" alt="image-20220124154945796" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241802137.png" alt="image-20220124154952903" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803265.png" alt="image-20220124154958544" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803580.png" alt="image-20220124155005426" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803156.png" alt="image-20220124155011860" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803621.png" alt="image-20220124155020263" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803712.png" alt="image-20220124155027062" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803401.png" alt="image-20220124155033579" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803855.png" alt="image-20220124155040032" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803058.png" alt="image-20220124155047530" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803547.png" alt="image-20220124155053804" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803534.png" alt="image-20220124155101837" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803329.png" alt="image-20220124155108344" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803886.png" alt="image-20220124155115067" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803793.png" alt="image-20220124155121133" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803657.png" alt="image-20220124155126903" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803301.png" alt="image-20220124155136739" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803926.png" alt="image-20220124155147076" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803035.png" alt="image-20220124155153817" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803282.png" alt="image-20220124155203384" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803446.png" alt="image-20220124155208110" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803648.png" alt="image-20220124155214211" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/QianChenJun/cloudimage@main/img/202204241803201.png" alt="image-20220124155219092" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vmware安装&quot;&gt;&lt;a href=&quot;#vmware安装&quot; class=&quot;headerlink&quot; title=&quot;vmware安装&quot;&gt;&lt;/a&gt;vmware安装&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/QianChen</summary>
      
    
    
    
    <category term="千辰的小小笔记" scheme="https://qianchenjun.github.io/categories/%E5%8D%83%E8%BE%B0%E7%9A%84%E5%B0%8F%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="https://qianchenjun.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
